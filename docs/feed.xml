<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://www.nicolabs.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.nicolabs.net/" rel="alternate" type="text/html" /><updated>2021-11-25T23:06:08+01:00</updated><id>https://www.nicolabs.net/feed.xml</id><title type="html">nicolabs</title><subtitle>Work in progress...</subtitle><author><name>nicobo</name></author><entry><title type="html">Make a Raspberry Pi a Bluetooth speaker (part 1)</title><link href="https://www.nicolabs.net/2020/Make-RPi-bluetooth-speaker-part-1" rel="alternate" type="text/html" title="Make a Raspberry Pi a Bluetooth speaker (part 1)" /><published>2020-05-04T00:00:00+02:00</published><updated>2020-05-04T00:00:00+02:00</updated><id>https://www.nicolabs.net/2020/Make-RPi-bluetooth-speaker-part-1</id><content type="html" xml:base="https://www.nicolabs.net/2020/Make-RPi-bluetooth-speaker-part-1">&lt;p&gt;&lt;img src=&quot;/assets/blog/3rdparty/logos/Bluetooth_FM_Color.png&quot; alt=&quot;Bluetooth logo&quot; height=&quot;128px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this two-part article I describe the steps I had to take to make a &lt;em&gt;headless Raspberry Pi 4&lt;/em&gt; a Bluetooth &lt;a href=&quot;https://www.howtogeek.com/338750/whats-the-difference-between-bluetooth-a2dp-and-aptx/&quot;&gt;A2DP&lt;/a&gt; speaker.&lt;/p&gt;

&lt;p&gt;My goal was to offer a user-friendly way for anyone in the same room to pair its Bluetooth smartphone with the Raspberry Pi and play music through it, while making sure the neighbors won’t be able to connect without approval.&lt;/p&gt;

&lt;p&gt;To output music, you can connect a Hi-Fi system  to the Raspberry Pi using the Jack plug or an audio add-on card : this part depends on your setup.&lt;/p&gt;

&lt;p&gt;Allright, let’s dive into how Bluetooth works.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;This is a two-part article :&lt;/em&gt;&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;em&gt;How Bluetooth pairing works (this part)&lt;/em&gt;&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;Raspberry Pi as a Bluetooth A2DP receiver (soon available)&lt;/em&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-bluetooth-pairing-works&quot;&gt;How Bluetooth pairing works&lt;/h2&gt;

&lt;p&gt;Bluetooth is quite a complex thing. Really. I haven’t realized before I started this mini project. Beside its original goal to be a wireless replacement for cables, Bluetooth actually includes &lt;a href=&quot;https://en.wikipedia.org/wiki/Bluetooth#List_of_applications&quot;&gt;a myriad of features&lt;/a&gt;.
In order to understand how we should connect to our Raspberry Pi (&lt;em&gt;RPi&lt;/em&gt;), let’s focus on some core aspects of Bluetooth.&lt;/p&gt;

&lt;h3 id=&quot;bluetooth-security-models&quot;&gt;Bluetooth security models&lt;/h3&gt;

&lt;p&gt;Being tightly coupled with hardware, Bluetooth has evolved a lot since its beginnings, following industry’s technical enhancements over the years.
This is why it has so many &lt;em&gt;security models&lt;/em&gt; ; let’s try to understand how they compare.&lt;/p&gt;

&lt;h4 id=&quot;there-are-two-distinct-families-of-bluetooth&quot;&gt;There are two distinct “families” of Bluetooth.&lt;/h4&gt;

&lt;p&gt;The legacy, &lt;strong&gt;Basic Rate (BR)&lt;/strong&gt; was the first and only protocol in the beginning. It was quickly complemented with &lt;em&gt;EDR (Enhanced Data Rate)&lt;/em&gt; in Bluetooth 2.0, hence the name &lt;strong&gt;BR/EDR&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Bluetooth 4.0 came with another, not backward-compatible protocol  : &lt;strong&gt;Bluetooth Low Energy (abbreviated LE, or BLE)&lt;/strong&gt;. This new Bluetooth “family” requires less energy and fits smartphones and &lt;em&gt;IoT&lt;/em&gt; better.&lt;/p&gt;

&lt;p&gt;Althought &lt;em&gt;BR/EDR&lt;/em&gt; and &lt;em&gt;BLE&lt;/em&gt; are not compatible, Bluetooth devices can implement one or the other, or even both. For the record there is also an &lt;em&gt;AMP&lt;/em&gt; specification, usually implemented in a secondary controller, in order to achieve Wi-Fi class transfer rates.&lt;/p&gt;

&lt;p&gt;Each protocol “family” has their own security and association models, even though they follow the same logic :&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;plantuml&quot; id=&quot;066cc5d2b2fa5d69148f35ff812fb260&quot; alt=&quot;PlantUML diagram&quot; src=&quot;/assets/uml/066cc5d2b2fa5d69148f35ff812fb260.svg&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;which-security-level-to-choose-&quot;&gt;Which security level to choose ?&lt;/h4&gt;

&lt;p&gt;The Bluetooth Core Specification&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; makes it clear that :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Secure Connections Only Mode is sometimes called a “FIPS Mode”.
This mode should be used when it is more important for a device to have high security than it is for it to maintain backwards compatibility with devices that do not support Secure Connections.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My feeling reading the specifications is that Bluetooth was not made with high expectations on security from the beginning. It has so many trade-offs at the benefit of usability that &lt;em&gt;Secure Connections&lt;/em&gt;, whether for BR/EDR or LE, just looks to me like the bare minimum to have.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BR/EDR Legacy Pairing&lt;/em&gt;’s security for instance &lt;em&gt;unavoidably depends&lt;/em&gt; on the length of the PIN (which is often a small four-digit number, or even a fixed value) and provide little-to-none protection against eavesdropping or man-in-the-middle (MITM) attacks.
&lt;em&gt;Secure Simple Pairing&lt;/em&gt; for its part only &lt;em&gt;“protects the user from MITM attacks with a goal of offering a 1 in 1,000,000 chance that a MITM could mount a successful attack&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;“&lt;/em&gt;. It strongly depends on human decisions (based on failure alerts in case of an attack) to mitigate the risk and allows for configurations that &lt;em&gt;would&lt;/em&gt; make it unsecure.
Without going on with further examples, it’s easy to configure it wrong and let the neighbors accidentally connect to your Bluetooth device or any passing-by hacker to gather any personal information.&lt;/p&gt;

&lt;p&gt;Also, “LE is the new BR/EDR”. Most efforts seem to be put on Bluetooth LE and Bluetooh BR/EDR suffers from not being up-to-date with today’s requirements. For instance : in BR/EDR, cryptographic key generation is being made in lower, often hardware, layers, making it difficult to upgrade security algorithms.
This is probably the fate of a very pragmatic specification that didn’t intend to foresee the future of technology ; unfortunately this leaves us with a plethora of unsecure devices in the wild.&lt;/p&gt;

&lt;p&gt;Wrapping up, this gives the “LE Secure Connections” mode my preference and I will try to make it rule my configuration.&lt;/p&gt;

&lt;h3 id=&quot;bluetooth-association-models&quot;&gt;Bluetooth association models&lt;/h3&gt;

&lt;p&gt;The above diagram states that there are several &lt;em&gt;association models&lt;/em&gt; ; here are the four ones that apply to &lt;em&gt;Bluetooth Low Energy&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Numeric Comparison&lt;/strong&gt; (only since Bluetooth 4.2 for BLE)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Just Works&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Passkey entry&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Out-of-Band (OOB)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the sake of completeness we will also talk about :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;BR/EDR Legacy pairing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see how they work, and how well they would fit our use case.&lt;/p&gt;

&lt;h4 id=&quot;numeric-comparison&quot;&gt;Numeric comparison&lt;/h4&gt;

&lt;p&gt;The Bluetooth Core Specification&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; has a very neat way to describe the &lt;em&gt;Numeric Comparison&lt;/em&gt; model :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The user is shown a six digit number (from “000000” to “999999”) on both
displays and then asked whether the numbers are the same on both devices. If
“yes” is entered on both devices, the pairing is successful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is important to understand that &lt;em&gt;this number is not chosen&lt;/em&gt; by any party : it is randomly computed on each connection attempt, as part of the pairing algorithm&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. &lt;em&gt;It is not a passcode&lt;/em&gt; either : it just helps users check that they pair to the expected device by showing the same value on both sides. If a malicious user were trying to penetrate our home he would just have to hit “Yes” on its side, whatever the value of this 6-digit number.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Numeric Comparison&lt;/em&gt; protocol also allows devices to skip this user confirmation&lt;sup id=&quot;fnref:4:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; to automatically pair, but in order to preserve control over who can connect, we should not make this possible and enforce a confirmation on the RPi side.&lt;/p&gt;

&lt;h4 id=&quot;just-works&quot;&gt;Just works&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;Just Works&lt;/em&gt; model is a specific case of &lt;em&gt;Numeric Comparison&lt;/em&gt; designed for the case where at least one device in the pair has no human interface at all.
Therefore, it does not enforce any confirmation whatsoever.&lt;/p&gt;

&lt;p&gt;Here is an excerpt from the specifications&lt;sup id=&quot;fnref:3:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Just Works association model uses the Numeric Comparison protocol but
the user is never shown a number and the application may simply ask the user
to accept the connection (exact implementation is up to the end product
manufacturer).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for &lt;em&gt;Numeric Comparison&lt;/em&gt;, it looks like a good candidate for our use case, provided that we add a confirmation step as allowed.&lt;/p&gt;

&lt;h4 id=&quot;passkey-entry&quot;&gt;Passkey Entry&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Passkey Entry&lt;/em&gt; is used when one of the devices has input capabilities but no display (e.g. a keyboard).&lt;/p&gt;

&lt;p&gt;A six-digit number is displayed on the device that can display and must be entered on the other one for the pairing to be successful.&lt;/p&gt;

&lt;p&gt;At the difference of &lt;em&gt;Numeric Comparison&lt;/em&gt;, this number is not only here to check that the devices are the ones we intend to pair, but it also serves as an input data &lt;em&gt;required&lt;/em&gt; to authenticate and validate the association&lt;sup id=&quot;fnref:4:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;In contrast with &lt;em&gt;Numeric Comparison&lt;/em&gt;, this model does not allow automatic connection because each side has to prove they know the &lt;em&gt;passkey&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;em&gt;display device&lt;/em&gt; is the only one to know the number in the beginning ; it decides the way the &lt;em&gt;passkey&lt;/em&gt; is revealed to the other one&lt;/li&gt;
  &lt;li&gt;the &lt;em&gt;input-only device&lt;/em&gt; must enter the (supposedly secret) &lt;em&gt;passkey&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With some tweaks, a headless Raspberry Pi might be on one side or the other :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if it were the &lt;em&gt;display device&lt;/em&gt;, we should replace the display step with an equivalent, headless mechanism that allows the other user to obtain the number&lt;/li&gt;
  &lt;li&gt;if it were the &lt;em&gt;input-only device&lt;/em&gt;, we should find a way to get the number displayed on the other device entered into the RPi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This may not look trivial ; we’ll see what can be done later on…&lt;/p&gt;

&lt;h4 id=&quot;out-of-band-oob&quot;&gt;Out of Band (OOB)&lt;/h4&gt;

&lt;p&gt;With &lt;a href=&quot;https://www.bluetooth.com/blog/bluetooth-pairing-part-5-legacy-pairing-out-of-band/&quot;&gt;Out of Band&lt;/a&gt;, the devices first discover (and optionally authenticate) themselves with a different mechanism than Bluetooth. It can be any protocol, like NFC or Wi-Fi for instance.&lt;/p&gt;

&lt;p&gt;This fits well when both devices are known to share a common mechanism and are explicitly set up to work in this way. For instance a camera and its manufacturer’s mobile application will both be programmed to connect with NFC first, then share their “services” through Bluetooth.&lt;/p&gt;

&lt;p&gt;But this seemingly won’t work for us, as we want to allow common smartphones - with only standard applications - to connect.
Furthermore, adding another mechanism than Bluetooth as a requirement looks superfluous…&lt;/p&gt;

&lt;h4 id=&quot;bredr-models&quot;&gt;BR/EDR models&lt;/h4&gt;

&lt;p&gt;The four previous models also apply to the BR/EDR side but with some subtle differences in their implementation, which we will not cover…&lt;/p&gt;

&lt;p&gt;Finally, there is one more model that apply only to the BR/EDR family : &lt;strong&gt;BR/EDR Legacy pairing&lt;/strong&gt;, which was the only association model before Bluetooth 2.1 (see the diagram above).&lt;/p&gt;

&lt;p&gt;It requires the two devices to enter the same, 16-character maximum, secret PIN code.&lt;/p&gt;

&lt;p&gt;Although it looks similar to &lt;em&gt;Passkey Entry&lt;/em&gt;, it is far less secure because, here, the connection’s encryption directly depends on the complexity of the PIN code.&lt;/p&gt;

&lt;p&gt;What sounds like a practical idea that could be easily implemented on headless devices by simply setting up a static PIN code, unfortunately reveals to be largely unsecure, because the underlying cryptography is not strong enough to compensate weak/short/static/numeric only PIN codes that can be seen on many devices in the wild…&lt;/p&gt;

&lt;p&gt;It is therefore not considered a potential solution in this article.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TODO Compare the security of a four-digit vs a really long PIN code in this model vs in other models&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;choosing-the-right-association-model&quot;&gt;Choosing the right association model&lt;/h3&gt;

&lt;p&gt;I’ve chosen the three following factors to compare BLE association models regarding my use case :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Should not require complex user interaction on the Raspberry Pi’s side (e.g. no SSH login to type a passkey)&lt;/li&gt;
  &lt;li&gt;Must be able to control who can connect to the Raspberry Pi (i.e. only known device or manually approved ones)&lt;/li&gt;
  &lt;li&gt;Secure enough (as much as Bluetooth can)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s summarize what we’ve asserted in the previous chapter :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Numeric comparison*&lt;/th&gt;
      &lt;th&gt;Just Works&lt;/th&gt;
      &lt;th&gt;Passkey Entry&lt;/th&gt;
      &lt;th&gt;Out of Band&lt;/th&gt;
      &lt;th&gt;BR/EDR Legacy Pairing&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;No user interaction&lt;/td&gt;
      &lt;td&gt;no ❌&lt;/td&gt;
      &lt;td&gt;yes ✅&lt;/td&gt;
      &lt;td&gt;no ❌&lt;/td&gt;
      &lt;td&gt;assumed yes ✅&lt;/td&gt;
      &lt;td&gt;yes ✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Control who can connect&lt;/td&gt;
      &lt;td&gt;no ❌&lt;/td&gt;
      &lt;td&gt;no ❌&lt;/td&gt;
      &lt;td&gt;yes ✅&lt;/td&gt;
      &lt;td&gt;assumed yes ✅&lt;/td&gt;
      &lt;td&gt;yes ✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Secure&lt;/td&gt;
      &lt;td&gt;yes ✅&lt;/td&gt;
      &lt;td&gt;yes ✅&lt;/td&gt;
      &lt;td&gt;yes ✅&lt;/td&gt;
      &lt;td&gt;yes** ✅&lt;/td&gt;
      &lt;td&gt;no ❌&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;* without automatic pairing&lt;/em&gt;
&lt;em&gt;** even more than others&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This table shows, in a way, that authorization in Bluetooth expects either no approval or a manual one, which makes it hard to get good security with headless devices…&lt;/p&gt;

&lt;p&gt;As discussed before, &lt;em&gt;Out of Band&lt;/em&gt; is eliminated because it requires another protocol and &lt;em&gt;BR/EDR Legacy Pairing&lt;/em&gt; is irrelevant for security reasons.&lt;/p&gt;

&lt;p&gt;In order to get all three requirements met we therefore may use :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Just Works&lt;/strong&gt; with additional authorization&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Numeric Comparison&lt;/strong&gt; with a headless validation step&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Passkey Entry&lt;/strong&gt; with a headless mechanism to display and validate a 6-digit number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, except for &lt;em&gt;BR/EDR Legacy Pairing&lt;/em&gt; &lt;strong&gt;one cannot &lt;em&gt;choose&lt;/em&gt; the association model : it is asserted from the devices’ capabilities&lt;/strong&gt;, called &lt;a href=&quot;https://www.bluetooth.com/blog/bluetooth-pairing-part-1-pairing-feature-exchange/&quot;&gt;&lt;em&gt;Input and Output capabilities (IO capabilities)&lt;/em&gt;&lt;/a&gt;&lt;sup id=&quot;fnref:7&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;In order to make sure only approved workflows can be selected, our RPi device must therefore advertise only the matching IO capabilites.&lt;/p&gt;

&lt;p&gt;How ? There are full-blown tables&lt;sup id=&quot;fnref:3:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; describing the available IO capabilities and the mapping to the matching association models.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;input capabilites&lt;/strong&gt; are :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;No input&lt;/strong&gt; : Device does not have the ability to indicate ‘yes’ or ‘no’&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Yes / No&lt;/strong&gt; : Device provides the user a way to indicate either ‘yes’ or ‘no’&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keyboard&lt;/strong&gt; : Device allows the user to input numbers &lt;em&gt;and&lt;/em&gt; to indicate ‘yes’ or ‘no’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the &lt;strong&gt;output capabilities&lt;/strong&gt; are :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;No output&lt;/strong&gt; : Device does not have the ability to display or communicate a
6 digit decimal number&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Numeric output&lt;/strong&gt; : Device has the ability to display or communicate a 6 digit decimal number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an overview of the &lt;strong&gt;IO capabilities mapping to the matching association models&lt;/strong&gt; :&lt;/p&gt;

&lt;table&gt;
    &lt;caption&gt;Mapping of IO capabilities to key generation method (simplified)&lt;/caption&gt;
    &lt;colgroup&gt;
        &lt;col class=&quot;col-header&quot; /&gt;
        &lt;col class=&quot;col-header&quot; /&gt;
    &lt;/colgroup&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot; class=&quot;empty&quot; /&gt;
        &lt;th colspan=&quot;5&quot;&gt;Device A (Initiator)&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot; class=&quot;empty&quot; /&gt;
        &lt;th&gt;
            Display Only                        &lt;br /&gt;&lt;span class=&quot;small&quot;&gt;
            (No input + Numeric output)         &lt;/span&gt;&lt;/th&gt;
        &lt;th class=&quot;cell-selected&quot;&gt;
            Display YesNo                        &lt;br /&gt;&lt;span class=&quot;small&quot;&gt;
            (Yes/No + Numeric output)           &lt;/span&gt;&lt;/th&gt;
        &lt;th&gt;
            Keyboard Only                        &lt;br /&gt;&lt;span class=&quot;small&quot;&gt;
            (Keyboard + No output)              &lt;/span&gt;&lt;/th&gt;
        &lt;th class=&quot;cell-noinputnooutput&quot;&gt;
            NoInput NoOutput                     &lt;br /&gt;&lt;span class=&quot;small&quot;&gt;
            (No input or Yes/No + No output)       &lt;/span&gt;&lt;/th&gt;
        &lt;th class=&quot;cell-selected&quot;&gt;
            Keyboard Display                     &lt;br /&gt;&lt;span class=&quot;small&quot;&gt;
            (Keyboard + Numeric output)         &lt;/span&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;!-- Row for DisplayOnly --&gt;
    &lt;tr&gt;
        &lt;th class=&quot;vertical&quot; rowspan=&quot;5&quot;&gt;&lt;span&gt;Device B (Responder)&lt;/span&gt;&lt;/th&gt;
        &lt;th class=&quot;vertical&quot;&gt;&lt;span&gt;Display Only&lt;/span&gt;&lt;/th&gt;
        &lt;td&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-selected&quot;&gt;Just Works&lt;/td&gt;
        &lt;td&gt;Passkey Entry : responder displays, initiator inputs&lt;/td&gt;
        &lt;td class=&quot;cell-noinputnooutput&quot;&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-selected&quot;&gt;Passkey Entry : responder displays, initiator inputs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;!-- Row for DisplayYesNo --&gt;
    &lt;tr&gt;
        &lt;th class=&quot;vertical&quot;&gt;&lt;span&gt;Display YesNo&lt;/span&gt;&lt;/th&gt;
        &lt;td&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-selected&quot;&gt;Numeric Comparison&lt;/td&gt;
        &lt;td&gt;Passkey Entry : responder displays, initiator inputs&lt;/td&gt;
        &lt;td class=&quot;cell-noinputnooutput&quot;&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-selected&quot;&gt;Numeric Comparison&lt;/td&gt;
    &lt;/tr&gt;
    &lt;!-- Row for KeyboardOnly --&gt;
    &lt;tr&gt;
        &lt;th class=&quot;vertical&quot;&gt;&lt;span&gt;Keyboard Only&lt;/span&gt;&lt;/th&gt;
        &lt;td&gt;Passkey Entry: initiator displays, responder inputs&lt;/td&gt;
        &lt;td class=&quot;cell-selected&quot;&gt;Passkey Entry: initiator displays, responder inputs&lt;/td&gt;
        &lt;td&gt;Passkey Entry: both input&lt;/td&gt;
        &lt;td class=&quot;cell-noinputnooutput&quot;&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-selected&quot;&gt;Passkey Entry: initiator displays, responder inputs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;!-- Row for NoInputNoOutput --&gt;
    &lt;tr&gt;
        &lt;th class=&quot;vertical&quot;&gt;&lt;span&gt;NoInput NoOutput&lt;/span&gt;&lt;/th&gt;
        &lt;td class=&quot;cell-noinputnooutput&quot;&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-selected cell-noinputnooutput&quot;&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-noinputnooutput&quot;&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-noinputnooutput&quot;&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-selected cell-noinputnooutput&quot;&gt;Just Works&lt;/td&gt;
    &lt;/tr&gt;
    &lt;!-- Row for KeyboardDisplay --&gt;
    &lt;tr&gt;
        &lt;th class=&quot;vertical&quot;&gt;&lt;span&gt;Keyboard Display&lt;/span&gt;&lt;/th&gt;
        &lt;td&gt;Passkey Entry: initiator displays, responder inputs&lt;/td&gt;
        &lt;td class=&quot;cell-selected&quot;&gt;Numeric Comparison&lt;/td&gt;
        &lt;td&gt;Passkey Entry: responder displays, initiator inputs&lt;/td&gt;
        &lt;td class=&quot;cell-noinputnooutput&quot;&gt;Just Works&lt;/td&gt;
        &lt;td class=&quot;cell-selected&quot;&gt;Numeric Comparison&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Source : Mapping of IO capabilities to key generation method&lt;sup id=&quot;fnref:7:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; (without OOB nor LE Legacy Pairing)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Assuming smartphones would advertise themselves either as &lt;em&gt;DisplayYesNo&lt;/em&gt; or &lt;em&gt;KeyboardDisplay&lt;/em&gt; (highlighted cells), the above matrix shows that we should prepare to connect using any association model.&lt;/p&gt;

&lt;p&gt;Additionally, this table emphasizes that &lt;strong&gt;a device may enforce the &lt;em&gt;Just Works&lt;/em&gt; model&lt;/strong&gt; simply by advertising itself as &lt;em&gt;NoInputNoOutput&lt;/em&gt;. Although this makes it easier for the Industry to build devices with limited or no interface, this is also a leverage for pirates to force our system into a lower security.&lt;/p&gt;

&lt;p&gt;We have the possibility to deny any pairing with the &lt;em&gt;Just Works&lt;/em&gt; workflow, but this may prevent some genuine devices to connect : we should rather enforce a validation step. The main difference between “Just Works + validation” and other workflows would be the use of a custom authentication mechanism instead of a six-digit number verification.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-altogether-with-bluez&quot;&gt;Putting it altogether with BlueZ&lt;/h3&gt;

&lt;p&gt;Now that we know &lt;em&gt;what&lt;/em&gt; we should do in our solution, let’s have an overiew of &lt;em&gt;how&lt;/em&gt; to implement it.&lt;/p&gt;

&lt;p&gt;Linux systems (which we will use for our Raspberry Pi) have a complex Bluetooth stack, but we will only need to focus on the following parts :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;a href=&quot;http://www.bluez.org/&quot;&gt;BlueZ&lt;/a&gt; system daemon will handle core Bluetooth features&lt;/li&gt;
  &lt;li&gt;modules will allow us to connect with specialized services : ALSA/PulseAudio in our case in order to receive and play sound from paired devices&lt;/li&gt;
  &lt;li&gt;a registration &lt;strong&gt;agent&lt;/strong&gt; will handle the pairing part as we like&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having the Bluez daemon and the audio modules work together is only a matter of configuration (which is already not trivial).&lt;/p&gt;

&lt;p&gt;However I could not find a bluetooth agent matching my use case : the default agent &lt;a href=&quot;https://unix.stackexchange.com/questions/352494/alternative-to-the-now-deprecated-rfcomm-binary-in-bluez#463502&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bt-agent&lt;/code&gt; has been deprecated&lt;/a&gt; ; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluetoothctl&lt;/code&gt; command is not really scriptable ; the quite common &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simple-agent&lt;/code&gt; sample script does not implement the right features.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Bluetooth does not provide a secure and automatic way to pair with headless devices out of the box.&lt;/p&gt;

&lt;p&gt;The existence of several association models with complex selection rules make it easy to get it wrong.&lt;/p&gt;

&lt;p&gt;We will use the &lt;em&gt;bluez&lt;/em&gt; Linux stack to implement the basis of our solution and will need to create a custom agent to handle pairing in the exact way we want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1 is over, let’s see how to set up the whole thing in part 2 : “Raspberry Pi as a Bluetooth A2DP receiver” (soon available).&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Top illustration : &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Bluetooth_FM_Color.png&quot;&gt;Bluetooth.svg by Skarr21&lt;/a&gt; / &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0&quot;&gt;CC BY-SA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluetooth.com/blog/bluetooth-pairing-part-1-pairing-feature-exchange/&quot;&gt;Bluetooth Pairing Part 1 – Pairing Feature Exchange&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluetooth.com/blog/bluetooth-pairing-part-2-key-generation-methods/&quot;&gt;Bluetooth Pairing Part 2 Key Generation Methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluetooth.com/blog/bluetooth-pairing-passkey-entry/?utm_campaign=developer&amp;amp;utm_source=internal&amp;amp;utm_medium=blog&amp;amp;utm_content=bluetooth-pairing-part-4-LE-secure-connections-numeric-comparison&quot;&gt;Bluetooth Pairing Part 3 – Low Energy Legacy Pairing Passkey Entry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluetooth.com/blog/bluetooth-pairing-part-4/?utm_campaign=developer&amp;amp;utm_source=internal&amp;amp;utm_medium=blog&amp;amp;utm_content=bluetooth-pairing-part-3-low-energy-legacy-pairing-passkey-entry&quot;&gt;Bluetooth Pairing Part 4: Bluetooth Low Energy Secure Connections – Numeric Comparison&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluetooth.com/specifications/bluetooth-core-specification/&quot;&gt;Bluetooth Core Specification v5.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bluetooth#Pairing_and_bonding&quot;&gt;en.wikipedia.org/wiki/Bluetooth&lt;/a&gt;, 2020-04-10&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bluetooth-core-specification-inline-references&quot;&gt;Bluetooth Core specification inline references&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Bluetooth Core specification Vol 1, Part A, §5.3 “SECURE CONNECTIONS ONLY MODE” &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Bluetooth Core specification Vol 1, Part A, §5.2 “BR/EDR SECURE SIMPLE PAIRING” &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Bluetooth Core specification Vol 3, Part C, §5.2.2.4 “IO capabilities” &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:3:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:3:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Bluetooth Core specification Vol 2, Part F, §4.2 “SIMPLE PAIRING MESSAGE SEQUENCE CHARTS” &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:4:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:4:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Bluetooth Core specification Vol 2, Part H, §7.2.3 “Authentication stage 1: Passkey Entry protocol” &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Bluetooth Core specification Vol 3, Part H, §2.3.5.4 “Out of band” &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Bluetooth Core specification Vol 3, Part H, §2.3.2 “IO capabilities” &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:7:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>nicobo</name></author><category term="raspberry pi" /><category term="bluetooth" /><category term="Series : Make a Raspberry Pi a Bluetooth speaker" /><summary type="html">In this two-part article I describe the steps I had to take to make a headless Raspberry Pi 4 a Bluetooth A2DP speaker. My goal was to offer a user-friendly way for anyone in the same room to pair its Bluetooth smartphone with the Raspberry Pi and play music through it, while making sure the neighbors won’t be able to connect without approval. To output music, you can connect a Hi-Fi system to the Raspberry Pi using the Jack plug or an audio add-on card : this part depends on your setup. Allright, let’s dive into how Bluetooth works. This is a two-part article : How Bluetooth pairing works (this part) Raspberry Pi as a Bluetooth A2DP receiver (soon available) How Bluetooth pairing works Bluetooth is quite a complex thing. Really. I haven’t realized before I started this mini project. Beside its original goal to be a wireless replacement for cables, Bluetooth actually includes a myriad of features. In order to understand how we should connect to our Raspberry Pi (RPi), let’s focus on some core aspects of Bluetooth. Bluetooth security models Being tightly coupled with hardware, Bluetooth has evolved a lot since its beginnings, following industry’s technical enhancements over the years. This is why it has so many security models ; let’s try to understand how they compare. There are two distinct “families” of Bluetooth. The legacy, Basic Rate (BR) was the first and only protocol in the beginning. It was quickly complemented with EDR (Enhanced Data Rate) in Bluetooth 2.0, hence the name BR/EDR. Bluetooth 4.0 came with another, not backward-compatible protocol : Bluetooth Low Energy (abbreviated LE, or BLE). This new Bluetooth “family” requires less energy and fits smartphones and IoT better. Althought BR/EDR and BLE are not compatible, Bluetooth devices can implement one or the other, or even both. For the record there is also an AMP specification, usually implemented in a secondary controller, in order to achieve Wi-Fi class transfer rates. Each protocol “family” has their own security and association models, even though they follow the same logic : Which security level to choose ? The Bluetooth Core Specification1 makes it clear that : Secure Connections Only Mode is sometimes called a “FIPS Mode”. This mode should be used when it is more important for a device to have high security than it is for it to maintain backwards compatibility with devices that do not support Secure Connections. My feeling reading the specifications is that Bluetooth was not made with high expectations on security from the beginning. It has so many trade-offs at the benefit of usability that Secure Connections, whether for BR/EDR or LE, just looks to me like the bare minimum to have. BR/EDR Legacy Pairing’s security for instance unavoidably depends on the length of the PIN (which is often a small four-digit number, or even a fixed value) and provide little-to-none protection against eavesdropping or man-in-the-middle (MITM) attacks. Secure Simple Pairing for its part only “protects the user from MITM attacks with a goal of offering a 1 in 1,000,000 chance that a MITM could mount a successful attack2“. It strongly depends on human decisions (based on failure alerts in case of an attack) to mitigate the risk and allows for configurations that would make it unsecure. Without going on with further examples, it’s easy to configure it wrong and let the neighbors accidentally connect to your Bluetooth device or any passing-by hacker to gather any personal information. Also, “LE is the new BR/EDR”. Most efforts seem to be put on Bluetooth LE and Bluetooh BR/EDR suffers from not being up-to-date with today’s requirements. For instance : in BR/EDR, cryptographic key generation is being made in lower, often hardware, layers, making it difficult to upgrade security algorithms. This is probably the fate of a very pragmatic specification that didn’t intend to foresee the future of technology ; unfortunately this leaves us with a plethora of unsecure devices in the wild. Wrapping up, this gives the “LE Secure Connections” mode my preference and I will try to make it rule my configuration. Bluetooth association models The above diagram states that there are several association models ; here are the four ones that apply to Bluetooth Low Energy : Numeric Comparison (only since Bluetooth 4.2 for BLE) Just Works Passkey entry Out-of-Band (OOB) For the sake of completeness we will also talk about : BR/EDR Legacy pairing Let’s see how they work, and how well they would fit our use case. Numeric comparison The Bluetooth Core Specification3 has a very neat way to describe the Numeric Comparison model : The user is shown a six digit number (from “000000” to “999999”) on both displays and then asked whether the numbers are the same on both devices. If “yes” is entered on both devices, the pairing is successful. It is important to understand that this number is not chosen by any party : it is randomly computed on each connection attempt, as part of the pairing algorithm4. It is not a passcode either : it just helps users check that they pair to the expected device by showing the same value on both sides. If a malicious user were trying to penetrate our home he would just have to hit “Yes” on its side, whatever the value of this 6-digit number. The Numeric Comparison protocol also allows devices to skip this user confirmation4 to automatically pair, but in order to preserve control over who can connect, we should not make this possible and enforce a confirmation on the RPi side. Just works The Just Works model is a specific case of Numeric Comparison designed for the case where at least one device in the pair has no human interface at all. Therefore, it does not enforce any confirmation whatsoever. Here is an excerpt from the specifications3 : The Just Works association model uses the Numeric Comparison protocol but the user is never shown a number and the application may simply ask the user to accept the connection (exact implementation is up to the end product manufacturer). As for Numeric Comparison, it looks like a good candidate for our use case, provided that we add a confirmation step as allowed. Passkey Entry Passkey Entry is used when one of the devices has input capabilities but no display (e.g. a keyboard). A six-digit number is displayed on the device that can display and must be entered on the other one for the pairing to be successful. At the difference of Numeric Comparison, this number is not only here to check that the devices are the ones we intend to pair, but it also serves as an input data required to authenticate and validate the association4 5. In contrast with Numeric Comparison, this model does not allow automatic connection because each side has to prove they know the passkey : the display device is the only one to know the number in the beginning ; it decides the way the passkey is revealed to the other one the input-only device must enter the (supposedly secret) passkey With some tweaks, a headless Raspberry Pi might be on one side or the other : if it were the display device, we should replace the display step with an equivalent, headless mechanism that allows the other user to obtain the number if it were the input-only device, we should find a way to get the number displayed on the other device entered into the RPi This may not look trivial ; we’ll see what can be done later on… Out of Band (OOB) With Out of Band, the devices first discover (and optionally authenticate) themselves with a different mechanism than Bluetooth. It can be any protocol, like NFC or Wi-Fi for instance. This fits well when both devices are known to share a common mechanism and are explicitly set up to work in this way. For instance a camera and its manufacturer’s mobile application will both be programmed to connect with NFC first, then share their “services” through Bluetooth. But this seemingly won’t work for us, as we want to allow common smartphones - with only standard applications - to connect. Furthermore, adding another mechanism than Bluetooth as a requirement looks superfluous… BR/EDR models The four previous models also apply to the BR/EDR side but with some subtle differences in their implementation, which we will not cover… Finally, there is one more model that apply only to the BR/EDR family : BR/EDR Legacy pairing, which was the only association model before Bluetooth 2.1 (see the diagram above). It requires the two devices to enter the same, 16-character maximum, secret PIN code. Although it looks similar to Passkey Entry, it is far less secure because, here, the connection’s encryption directly depends on the complexity of the PIN code. What sounds like a practical idea that could be easily implemented on headless devices by simply setting up a static PIN code, unfortunately reveals to be largely unsecure, because the underlying cryptography is not strong enough to compensate weak/short/static/numeric only PIN codes that can be seen on many devices in the wild… It is therefore not considered a potential solution in this article. TODO Compare the security of a four-digit vs a really long PIN code in this model vs in other models Choosing the right association model I’ve chosen the three following factors to compare BLE association models regarding my use case : Should not require complex user interaction on the Raspberry Pi’s side (e.g. no SSH login to type a passkey) Must be able to control who can connect to the Raspberry Pi (i.e. only known device or manually approved ones) Secure enough (as much as Bluetooth can) Let’s summarize what we’ve asserted in the previous chapter :   Numeric comparison* Just Works Passkey Entry Out of Band BR/EDR Legacy Pairing No user interaction no ❌ yes ✅ no ❌ assumed yes ✅ yes ✅ Control who can connect no ❌ no ❌ yes ✅ assumed yes ✅ yes ✅ Secure yes ✅ yes ✅ yes ✅ yes** ✅ no ❌ * without automatic pairing ** even more than others6 This table shows, in a way, that authorization in Bluetooth expects either no approval or a manual one, which makes it hard to get good security with headless devices… As discussed before, Out of Band is eliminated because it requires another protocol and BR/EDR Legacy Pairing is irrelevant for security reasons. In order to get all three requirements met we therefore may use : Just Works with additional authorization Numeric Comparison with a headless validation step Passkey Entry with a headless mechanism to display and validate a 6-digit number Unfortunately, except for BR/EDR Legacy Pairing one cannot choose the association model : it is asserted from the devices’ capabilities, called Input and Output capabilities (IO capabilities)7. In order to make sure only approved workflows can be selected, our RPi device must therefore advertise only the matching IO capabilites. How ? There are full-blown tables3 describing the available IO capabilities and the mapping to the matching association models. The input capabilites are : No input : Device does not have the ability to indicate ‘yes’ or ‘no’ Yes / No : Device provides the user a way to indicate either ‘yes’ or ‘no’ Keyboard : Device allows the user to input numbers and to indicate ‘yes’ or ‘no’ And the output capabilities are : No output : Device does not have the ability to display or communicate a 6 digit decimal number Numeric output : Device has the ability to display or communicate a 6 digit decimal number Here is an overview of the IO capabilities mapping to the matching association models : Mapping of IO capabilities to key generation method (simplified) Device A (Initiator) Display Only (No input + Numeric output) Display YesNo (Yes/No + Numeric output) Keyboard Only (Keyboard + No output) NoInput NoOutput (No input or Yes/No + No output) Keyboard Display (Keyboard + Numeric output) Device B (Responder) Display Only Just Works Just Works Passkey Entry : responder displays, initiator inputs Just Works Passkey Entry : responder displays, initiator inputs Display YesNo Just Works Numeric Comparison Passkey Entry : responder displays, initiator inputs Just Works Numeric Comparison Keyboard Only Passkey Entry: initiator displays, responder inputs Passkey Entry: initiator displays, responder inputs Passkey Entry: both input Just Works Passkey Entry: initiator displays, responder inputs NoInput NoOutput Just Works Just Works Just Works Just Works Just Works Keyboard Display Passkey Entry: initiator displays, responder inputs Numeric Comparison Passkey Entry: responder displays, initiator inputs Just Works Numeric Comparison Source : Mapping of IO capabilities to key generation method7 (without OOB nor LE Legacy Pairing) Assuming smartphones would advertise themselves either as DisplayYesNo or KeyboardDisplay (highlighted cells), the above matrix shows that we should prepare to connect using any association model. Additionally, this table emphasizes that a device may enforce the Just Works model simply by advertising itself as NoInputNoOutput. Although this makes it easier for the Industry to build devices with limited or no interface, this is also a leverage for pirates to force our system into a lower security. We have the possibility to deny any pairing with the Just Works workflow, but this may prevent some genuine devices to connect : we should rather enforce a validation step. The main difference between “Just Works + validation” and other workflows would be the use of a custom authentication mechanism instead of a six-digit number verification. Putting it altogether with BlueZ Now that we know what we should do in our solution, let’s have an overiew of how to implement it. Linux systems (which we will use for our Raspberry Pi) have a complex Bluetooth stack, but we will only need to focus on the following parts : the BlueZ system daemon will handle core Bluetooth features modules will allow us to connect with specialized services : ALSA/PulseAudio in our case in order to receive and play sound from paired devices a registration agent will handle the pairing part as we like Having the Bluez daemon and the audio modules work together is only a matter of configuration (which is already not trivial). However I could not find a bluetooth agent matching my use case : the default agent bt-agent has been deprecated ; the bluetoothctl command is not really scriptable ; the quite common simple-agent sample script does not implement the right features. Conclusion Bluetooth does not provide a secure and automatic way to pair with headless devices out of the box. The existence of several association models with complex selection rules make it easy to get it wrong. We will use the bluez Linux stack to implement the basis of our solution and will need to create a custom agent to handle pairing in the exact way we want. Part 1 is over, let’s see how to set up the whole thing in part 2 : “Raspberry Pi as a Bluetooth A2DP receiver” (soon available). References Top illustration : Bluetooth.svg by Skarr21 / CC BY-SA Bluetooth Pairing Part 1 – Pairing Feature Exchange Bluetooth Pairing Part 2 Key Generation Methods Bluetooth Pairing Part 3 – Low Energy Legacy Pairing Passkey Entry Bluetooth Pairing Part 4: Bluetooth Low Energy Secure Connections – Numeric Comparison Bluetooth Core Specification v5.2 en.wikipedia.org/wiki/Bluetooth, 2020-04-10 Bluetooth Core specification inline references Bluetooth Core specification Vol 1, Part A, §5.3 “SECURE CONNECTIONS ONLY MODE” &amp;#8617; Bluetooth Core specification Vol 1, Part A, §5.2 “BR/EDR SECURE SIMPLE PAIRING” &amp;#8617; Bluetooth Core specification Vol 3, Part C, §5.2.2.4 “IO capabilities” &amp;#8617; &amp;#8617;2 &amp;#8617;3 Bluetooth Core specification Vol 2, Part F, §4.2 “SIMPLE PAIRING MESSAGE SEQUENCE CHARTS” &amp;#8617; &amp;#8617;2 &amp;#8617;3 Bluetooth Core specification Vol 2, Part H, §7.2.3 “Authentication stage 1: Passkey Entry protocol” &amp;#8617; Bluetooth Core specification Vol 3, Part H, §2.3.5.4 “Out of band” &amp;#8617; Bluetooth Core specification Vol 3, Part H, §2.3.2 “IO capabilities” &amp;#8617; &amp;#8617;2</summary></entry><entry><title type="html">Bypassing GitHub’s Jekyll limitations</title><link href="https://www.nicolabs.net/2020/Bypassing-GitHub-Jekyll-limitations" rel="alternate" type="text/html" title="Bypassing GitHub’s Jekyll limitations" /><published>2020-04-13T00:00:00+02:00</published><updated>2020-04-13T00:00:00+02:00</updated><id>https://www.nicolabs.net/2020/Bypassing-GitHub-Jekyll-limitations</id><content type="html" xml:base="https://www.nicolabs.net/2020/Bypassing-GitHub-Jekyll-limitations">&lt;p&gt;&lt;img src=&quot;https://github.com/jekyll/brand/raw/master/jekyll-logo-dark-solid.png&quot; alt=&quot;Jekyll logo - CC-BY-4.0 License&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Jekyll logo - CC-BY-4.0 License - https://github.com/jekyll/brand&lt;/figcaption&gt;

&lt;p&gt;As I feared when I &lt;a href=&quot;/2016/Migrating-from-Drupal-to-Jekyll&quot;&gt;migrated to GitHub’s hosting&lt;/a&gt;, it has become too complicated to overcome GitHub’s limitations on Jekyll plugins and features.&lt;/p&gt;

&lt;p&gt;I just needed to create a &lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;&lt;em&gt;collection&lt;/em&gt;&lt;/a&gt; to put my &lt;a href=&quot;/2016/Migrating-from-Drupal-to-Jekyll&quot;&gt;“live drafts”&lt;/a&gt; into it, but the deprecated &lt;em&gt;jekyll-paginate&lt;/em&gt; plugin provided with GitHub pages didn’t support collections.&lt;/p&gt;

&lt;p&gt;I therefore switched to offline-building my site and pushing the generated static files to GitHub, which now serves them without Jekyll processing. I still use Jekyll to generate the final static files, which is perfectly ok.
The only thing I’m missing a bit is automatic build &amp;amp; deploy after a minor edit from my android smartphone (using &lt;a href=&quot;https://f-droid.org/fr/packages/net.gsantner.markor/&quot;&gt;Markor&lt;/a&gt; to edit and &lt;a href=&quot;https://f-droid.org/fr/packages/com.manichord.mgit/&quot;&gt;MGit&lt;/a&gt; to push to GitHub). It might be solved with some Travis CI automation I guess…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/about-github-pages#static-site-generators&quot;&gt;GitHub’s documentation about this&lt;/a&gt; is not very clear on the way one can still use &lt;em&gt;an autonomous&lt;/em&gt; Jekyll installation to build offline, without them building the site with &lt;strong&gt;their&lt;/strong&gt; locked-down Jekyll pipeline.
I assumed that I had to consider the procedure that applied to other tools. I had to :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.nojekyll&lt;/code&gt; file in the root of the repo&lt;/li&gt;
  &lt;li&gt;change &lt;a href=&quot;https://jekyllrb.com/docs/configuration/options/&quot;&gt;Jekyll’s output directory&lt;/a&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;use the standard Jekyll dependencies in my &lt;em&gt;Gemfile&lt;/em&gt; and specify the full &lt;a href=&quot;https://github.com/github/pages-gem/blob/master/lib/github-pages/plugins.rb&quot;&gt;list of plugins previously overwritten by github-pages&lt;/a&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;import and commit the code for the submodule &lt;em&gt;mastodon-timeline-widget&lt;/em&gt; inside this repo, not only leaving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitmodules&lt;/code&gt; file (static Javascript files that are used in the site, which were pulled automatically during GitHub’s processing)&lt;/li&gt;
  &lt;li&gt;make sure a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs/CNAME&lt;/code&gt; text file containing the domain to serve is present after each build (I discovered &lt;a href=&quot;https://github.com/mkdocs/mkdocs/pull/1497/commits&quot;&gt;it is created when the custom domain is enabled on GitHub&lt;/a&gt; ; unfortunately it is in the output &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs/&lt;/code&gt; directory, which may legitimately be deleted with a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll clean&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;I also had to change the name of the repo from &lt;em&gt;nicolabs.github.io&lt;/em&gt; to &lt;em&gt;nicolabs.net&lt;/em&gt; so it is not recognized as a user/organization repo, which was preventing me to put the code in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt; subdirectory (I already had an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; which had to be processed by Jekyll in the repo’s root, and therefore the website’s root could not be placed here)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall it was very easy and quick to migrate !&lt;/p&gt;</content><author><name>nicobo</name></author><category term="blogging" /><category term="jekyll" /><category term="github" /><summary type="html">Jekyll logo - CC-BY-4.0 License - https://github.com/jekyll/brand As I feared when I migrated to GitHub’s hosting, it has become too complicated to overcome GitHub’s limitations on Jekyll plugins and features. I just needed to create a collection to put my “live drafts” into it, but the deprecated jekyll-paginate plugin provided with GitHub pages didn’t support collections. I therefore switched to offline-building my site and pushing the generated static files to GitHub, which now serves them without Jekyll processing. I still use Jekyll to generate the final static files, which is perfectly ok. The only thing I’m missing a bit is automatic build &amp;amp; deploy after a minor edit from my android smartphone (using Markor to edit and MGit to push to GitHub). It might be solved with some Travis CI automation I guess… GitHub’s documentation about this is not very clear on the way one can still use an autonomous Jekyll installation to build offline, without them building the site with their locked-down Jekyll pipeline. I assumed that I had to consider the procedure that applied to other tools. I had to : create a .nojekyll file in the root of the repo change Jekyll’s output directory from _site to docs use the standard Jekyll dependencies in my Gemfile and specify the full list of plugins previously overwritten by github-pages in Gemfile &amp;amp; _config.yml import and commit the code for the submodule mastodon-timeline-widget inside this repo, not only leaving the .gitmodules file (static Javascript files that are used in the site, which were pulled automatically during GitHub’s processing) make sure a docs/CNAME text file containing the domain to serve is present after each build (I discovered it is created when the custom domain is enabled on GitHub ; unfortunately it is in the output docs/ directory, which may legitimately be deleted with a simple jekyll clean) I also had to change the name of the repo from nicolabs.github.io to nicolabs.net so it is not recognized as a user/organization repo, which was preventing me to put the code in a docs subdirectory (I already had an index.html which had to be processed by Jekyll in the repo’s root, and therefore the website’s root could not be placed here) Overall it was very easy and quick to migrate !</summary></entry><entry><title type="html">My favorite tools I want to tell the world about</title><link href="https://www.nicolabs.net/2019/My-favorite-tools-I-want-to-tell-the-world" rel="alternate" type="text/html" title="My favorite tools I want to tell the world about" /><published>2019-04-27T00:00:00+02:00</published><updated>2020-03-31T00:00:00+02:00</updated><id>https://www.nicolabs.net/2019/My-favorite-tools-I-want-to-tell-the-world</id><content type="html" xml:base="https://www.nicolabs.net/2019/My-favorite-tools-I-want-to-tell-the-world">&lt;p&gt;This page lists some tools I’ve been using with success for a while : they may fit your needs as well !&lt;/p&gt;

&lt;h2 id=&quot;nextcloud&quot;&gt;NextCloud&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/3rdparty/logos/nextcloud.108x72.png&quot; alt=&quot;NextCloud logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nextcloud.com/&quot;&gt;NextCloud&lt;/a&gt; (a fork of &lt;a href=&quot;https://owncloud.org/&quot;&gt;OwnCloud&lt;/a&gt;) is a very promising software that aims to bring usual cloud services to the home.&lt;/p&gt;

&lt;p&gt;However, it’s based on pluggable features that are not always stable. Here are the ones I’m using on a day-to-day basis :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;web interface to &lt;strong&gt;access my own files&lt;/strong&gt; (however synchronization, backup and other features on files are not yet usable in my opinion)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;share files&lt;/strong&gt; with others&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;calendar&lt;/strong&gt; (coupled with DAVDroid and any Android calendar it has all features Google Calendar has, except event import from/sharing to email)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;contacts&lt;/strong&gt; (really excellent)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;news&lt;/strong&gt; (use with a RSS/Atom reader on your mobile)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;plantuml&quot;&gt;PlantUML&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/3rdparty/logos/plantuml.116x112.png&quot; alt=&quot;PlantUML logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plantuml.com/&quot;&gt;PlantUML&lt;/a&gt; is a very simple &lt;strong&gt;textual language to create diagrams&lt;/strong&gt;.
You describe your diagram as plain text and use any of the provided tool to automatically render a picture.&lt;/p&gt;

&lt;p&gt;It is very easy to learn and has integrations with &lt;a href=&quot;https://plantuml.com/fr/running&quot;&gt;A LOT&lt;/a&gt; of tools.
As the diagrams are simple text blocks, you can save them in a version control system, diff’ them, embed them in other documents, copy/paste them in online tools to view and edit, …
It has several renderers out of the box like PNG, SVG, LaTeX ; you can even generate ASCII art sequence diagrams !&lt;/p&gt;

&lt;p&gt;I use it at work in &lt;em&gt;maven&lt;/em&gt; builds to generate technical or inline documentation, in &lt;em&gt;Atom&lt;/em&gt; or &lt;em&gt;Visual Studio Code&lt;/em&gt; for writing specifications, you can live-code architectures with colleagues, build deployment diagrams on the fly within a web page, …
You will also find several other tools not referenced from the main site but using the same language.&lt;/p&gt;

&lt;p&gt;The main drawback is that you don’t control the way figures are laid out.
Even with the few tweaks available you may not be able to get a clear view with the biggest diagrams.&lt;/p&gt;

&lt;h2 id=&quot;twidere&quot;&gt;Twidere&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/3rdparty/logos/twidere.512x512.png&quot; alt=&quot;Twidere logo&quot; height=&quot;128px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/TwidereProject/Twidere-Android&quot;&gt;Twidere&lt;/a&gt; is definitely the only one, perfect, &lt;strong&gt;Twitter&lt;/strong&gt; Android client for me (and I’ve been searching a lot).
It’s open source. It handles every single feature I need (disclaimer : I’m only a casual Twitter user).&lt;/p&gt;

&lt;p&gt;I’ve been using it for years… And since it happens to be very good also at &lt;strong&gt;Mastodon&lt;/strong&gt; I do continue to use it every day.&lt;/p&gt;

&lt;h2 id=&quot;wallabag&quot;&gt;Wallabag&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/3rdparty/logos/wallabag.200x69.png&quot; alt=&quot;Wallabag logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wallabag.org&quot;&gt;Wallabag&lt;/a&gt; is an open source alternative to &lt;em&gt;Pocket&lt;/em&gt;, &lt;em&gt;Instapaper&lt;/em&gt;, … to save articles from the web and &lt;strong&gt;read them later&lt;/strong&gt;.
There are integrations with web browsers and smartphones.
I’ve been adding and reading articles with wallabag for years : you don’t need another tool !&lt;/p&gt;

&lt;h2 id=&quot;more-tools&quot;&gt;More tools&lt;/h2&gt;

&lt;p&gt;The following ones are part of my toolbox, they will get a small description each in the future :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Passwordstore
    &lt;ul&gt;
      &lt;li&gt;warning ! &lt;a href=&quot;https://github.com/android-password-store/Android-Password-Store/issues/648&quot;&gt;The f-droid version is far out of date&lt;/a&gt;. It’s kind of tough to get a seamless integration with all tools (e.g. you have to get the very latest Android to benefit from Firefox mobile integration) but the simplicity of the mechanism (it’s nothing else than GPG-encrypted files possibly versioned with git) make it universal. I’m only doubtful about the community looking smaller than the one of the more graphical KeePass, which is a risk to see it unsupported in the future.&lt;/li&gt;
      &lt;li&gt;it can use git to pull &amp;amp; push changes to remote devices (the safest and most portable way I’ve found : it works in all clients I’ve tested : qtpass, Android, iOS), but not all apps provide the same user experience (e.g. &lt;em&gt;passforios&lt;/em&gt; does not pull/push automatically, it’s just a button but still annoying). The best option here - because we talk about critical data like passwords - is to use a private git repository, which unfortunately requires setting up a server&lt;/li&gt;
      &lt;li&gt;or you can use SyncThing for a seamless synchronization, with its (see below)&lt;/li&gt;
      &lt;li&gt;Available apps are not official and therefore suffer from a different maturity ; e.g. &lt;em&gt;passforios&lt;/em&gt; cannot generate SSH nor PGP keys by itself : it must import them (and &lt;a href=&quot;https://pgpro.app/&quot;&gt;PGPro&lt;/a&gt; only works on iOS 13+)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SyncThing is a very useful and generic decentralized (server-less) synchronization system for all your devices. However I couldn’t install it on iPhone and you can’t go without conflict files on a regular basis (which are just ok to delete 99% of the time however, so it’s fine in the end because it could not be done better after thinking about it)&lt;/li&gt;
  &lt;li&gt;ForceDoze (Android)&lt;/li&gt;
  &lt;li&gt;K-9 Mail&lt;/li&gt;
  &lt;li&gt;Silence&lt;/li&gt;
  &lt;li&gt;VLC&lt;/li&gt;
  &lt;li&gt;Markor (Android) / Bear (iOS)&lt;/li&gt;
  &lt;li&gt;FastHub-Libre&lt;/li&gt;
  &lt;li&gt;RadioDroid&lt;/li&gt;
  &lt;li&gt;AntennaPod&lt;/li&gt;
  &lt;li&gt;F-Droid&lt;/li&gt;
&lt;/ul&gt;</content><author><name>nicobo</name></author><category term="android" /><category term="cloud" /><category term="diagrams" /><category term="mastodon" /><category term="uml" /><category term="social" /><category term="tooling" /><category term="twitter" /><summary type="html">This page lists some tools I’ve been using with success for a while : they may fit your needs as well ! NextCloud NextCloud (a fork of OwnCloud) is a very promising software that aims to bring usual cloud services to the home. However, it’s based on pluggable features that are not always stable. Here are the ones I’m using on a day-to-day basis : web interface to access my own files (however synchronization, backup and other features on files are not yet usable in my opinion) share files with others calendar (coupled with DAVDroid and any Android calendar it has all features Google Calendar has, except event import from/sharing to email) contacts (really excellent) news (use with a RSS/Atom reader on your mobile) PlantUML PlantUML is a very simple textual language to create diagrams. You describe your diagram as plain text and use any of the provided tool to automatically render a picture. It is very easy to learn and has integrations with A LOT of tools. As the diagrams are simple text blocks, you can save them in a version control system, diff’ them, embed them in other documents, copy/paste them in online tools to view and edit, … It has several renderers out of the box like PNG, SVG, LaTeX ; you can even generate ASCII art sequence diagrams ! I use it at work in maven builds to generate technical or inline documentation, in Atom or Visual Studio Code for writing specifications, you can live-code architectures with colleagues, build deployment diagrams on the fly within a web page, … You will also find several other tools not referenced from the main site but using the same language. The main drawback is that you don’t control the way figures are laid out. Even with the few tweaks available you may not be able to get a clear view with the biggest diagrams. Twidere Twidere is definitely the only one, perfect, Twitter Android client for me (and I’ve been searching a lot). It’s open source. It handles every single feature I need (disclaimer : I’m only a casual Twitter user). I’ve been using it for years… And since it happens to be very good also at Mastodon I do continue to use it every day. Wallabag Wallabag is an open source alternative to Pocket, Instapaper, … to save articles from the web and read them later. There are integrations with web browsers and smartphones. I’ve been adding and reading articles with wallabag for years : you don’t need another tool ! More tools The following ones are part of my toolbox, they will get a small description each in the future : Passwordstore warning ! The f-droid version is far out of date. It’s kind of tough to get a seamless integration with all tools (e.g. you have to get the very latest Android to benefit from Firefox mobile integration) but the simplicity of the mechanism (it’s nothing else than GPG-encrypted files possibly versioned with git) make it universal. I’m only doubtful about the community looking smaller than the one of the more graphical KeePass, which is a risk to see it unsupported in the future. it can use git to pull &amp;amp; push changes to remote devices (the safest and most portable way I’ve found : it works in all clients I’ve tested : qtpass, Android, iOS), but not all apps provide the same user experience (e.g. passforios does not pull/push automatically, it’s just a button but still annoying). The best option here - because we talk about critical data like passwords - is to use a private git repository, which unfortunately requires setting up a server or you can use SyncThing for a seamless synchronization, with its (see below) Available apps are not official and therefore suffer from a different maturity ; e.g. passforios cannot generate SSH nor PGP keys by itself : it must import them (and PGPro only works on iOS 13+) SyncThing is a very useful and generic decentralized (server-less) synchronization system for all your devices. However I couldn’t install it on iPhone and you can’t go without conflict files on a regular basis (which are just ok to delete 99% of the time however, so it’s fine in the end because it could not be done better after thinking about it) ForceDoze (Android) K-9 Mail Silence VLC Markor (Android) / Bear (iOS) FastHub-Libre RadioDroid AntennaPod F-Droid</summary></entry><entry><title type="html">Migrating from Drupal to Jekyll</title><link href="https://www.nicolabs.net/2016/Migrating-from-Drupal-to-Jekyll" rel="alternate" type="text/html" title="Migrating from Drupal to Jekyll" /><published>2016-11-13T00:00:00+01:00</published><updated>2020-04-13T00:00:00+02:00</updated><id>https://www.nicolabs.net/2016/Migrating-from-Drupal-to-Jekyll</id><content type="html" xml:base="https://www.nicolabs.net/2016/Migrating-from-Drupal-to-Jekyll">&lt;p&gt;&lt;img src=&quot;/assets/blog/nicobo-landscape.png&quot; alt=&quot;Previous blog's banner background&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;new-blog-concept-&quot;&gt;New blog concept ?&lt;/h2&gt;

&lt;p&gt;I write articles about things that required enough amount of work for them to be considered worth sharing.
Writing, in turn, also require a fair amount of work to be comprehensive and accurate enough.&lt;/p&gt;

&lt;p&gt;I have to admit however that I don’t have time to write advanced articles as much as I would like to.
Many of them just stay unfinished in a draft state, never published…&lt;/p&gt;

&lt;p&gt;Therefore this blog is going to show shorter (and some unfinished) articles !
The good news is that some content that was hidden, in draft state, is going to be live !&lt;/p&gt;

&lt;p&gt;A first approach was to simply use a &lt;em&gt;git&lt;/em&gt; branch to put drafts (usually named ‘develop’), then merge them into the ‘master’ branch ; but that would imply either to publish two blogs : ‘draft’ and ‘release’ or to create a mechanism to merge the two branches into the same blog.&lt;/p&gt;

&lt;p&gt;I finally opted for a label in each article indicating its &lt;em&gt;maturity level&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-draft&quot;&gt;draft&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; A &lt;em&gt;draft&lt;/em&gt; label means something like “This article is in the process of being written, take it carefully as it may be wrong or change tomorrow”. &lt;strong&gt;I don’t endorse&lt;/strong&gt; the content of such articles even if published, however one may find its content useful in some way…&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-good&quot;&gt;good&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; An article with a &lt;em&gt;good&lt;/em&gt; maturity is one that I consider ready for publication, even if it has some minor flaws or missing parts.&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-stable&quot;&gt;stable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;Stable&lt;/em&gt; articles are the ones that have been published for a long time or that I consider rock-solid.&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-deprecated&quot;&gt;deprecated&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; Some articles may explicitly be labeled as &lt;em&gt;deprecated&lt;/em&gt; in order to emphasize the fact that they have deprecated content and should only be considered by people living in the past. Deprecation might not be a concept that suits perfectly within a maturity life cycle like previous labels, but for now I prefer keeping things simple and not using another tagging system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that some articles may show a &lt;em&gt;stable&lt;/em&gt; maturity while talking about &lt;em&gt;deprecated&lt;/em&gt; things. This is because an article may still be relevant even when talking about supplanted technologies, and also because I’m not going to constantly review old articles to check if they’re still at the cutting edge… &lt;a href=&quot;/articles/scaffolding-web-20&quot;&gt;Scaffolding the Web 2.0&lt;/a&gt; is a very good example of that case.&lt;/p&gt;

&lt;p&gt;In order to get an idea of the freshness of an article, I therefore print both its &lt;em&gt;creation&lt;/em&gt; and &lt;em&gt;last update&lt;/em&gt; times, allowing people to judge by themselves if it’s likely to be up-to-date or not.&lt;/p&gt;

&lt;p&gt;The paradigm I was fond of is therefore changing : a permanent URL on this blog still leads to the same article, but its content can definitely change (and break referring sources). In order to reference a content at a given fixed time, one can link to the original content on GitHub : there is a link to the full history of each article over their creation and update times labels (try with this one).&lt;/p&gt;

&lt;p&gt;Lastly, I still use the &lt;a href=&quot;https://jekyllrb.com/docs/drafts/&quot;&gt;drafts feature of Jekyll&lt;/a&gt; to prevent publishing of &lt;em&gt;very&lt;/em&gt; early notes that are just ideas or not even readable… Those can still be viewed in GitHub sources, but are not publicly rendered (I have a special &lt;span class=&quot;post-header&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;span class=&quot;maturity-label maturity-unpublished&quot;&gt;unpublished&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; label for myself).&lt;/p&gt;

&lt;h2 id=&quot;migrating-paths&quot;&gt;Migrating paths&lt;/h2&gt;

&lt;p&gt;Beside changing the concept, I’m also changing the platform, moving from self-hosted Drupal to Jekyll on GitHub Pages.&lt;/p&gt;

&lt;p&gt;During this migration I’ve tried to keep the old URLs still valid by keeping a way to make it through &lt;em&gt;HTTP redirects&lt;/em&gt;. Mostly for fun.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assets (images) are moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/assets/blog/...&lt;/code&gt; and specified as is in the markdown sources. I could have used Jekyll’s features to insert some variable but I did not want to add too much non-markdown (and framework-specific) code in the articles’ source. If the assets were to move again, it should be quite easy to replace all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/assets/blog/...&lt;/code&gt; strings with the correct path.&lt;/li&gt;
  &lt;li&gt;I’ve used Jekyll’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permalink&lt;/code&gt; option to keep the short URL of the articles so I just have to add an &lt;em&gt;HTTP redirect&lt;/em&gt; to serve the new blog under the old URLs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a screenshot of what the previous blog at &lt;a href=&quot;http://nicobo.net&quot;&gt;nicobo.net&lt;/a&gt; was looking like : &lt;a href=&quot;/assets/blog/screenshots/nicobo.net-screenshot-2019-10-26%2020-00-21.png&quot;&gt;screenshot&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whats-lost&quot;&gt;What’s lost&lt;/h2&gt;

&lt;p&gt;From rich HTML to Markdown, I’ve lost some of the visual/semantic styles I was using : I had to merge or get rid of some of them.&lt;/p&gt;

&lt;p&gt;Actually I must say that this does not really look like a bad thing : they were not &lt;em&gt;critical&lt;/em&gt; to the meaning of the text and it’s easier to concentrate on the content itself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lack of underlining in Markdown : I’ve used &lt;em&gt;normal&lt;/em&gt; (*) or &lt;strong&gt;strong&lt;/strong&gt; (**) emphasis&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file names&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commands&lt;/code&gt; used to have separate styles : although I miss this one a bit, I am now enclosing both of them in back ticks (`) and saving some seconds thinking about which style to use here.&lt;/li&gt;
  &lt;li&gt;I used to have 2 types of block quotes : &lt;em&gt;notes&lt;/em&gt; and &lt;em&gt;warnings&lt;/em&gt;. I am now using markdown quotes (&amp;gt;) for both, emphasizing important words for &lt;em&gt;warnings&lt;/em&gt; types&lt;/li&gt;
  &lt;li&gt;Pictures and text layout is now only a vertical flow : I don’t really care as it’s always been for pure visual left/right/center alignment and I used to spend a significant time building it.&lt;/li&gt;
  &lt;li&gt;Most of the visual helps I used to render with CSS are now back as indications in the text. E.g. I could emphasize portions of code to make the reader focus on them ; now I just describe them right before/after the code&lt;/li&gt;
  &lt;li&gt;I was using a &lt;em&gt;main tag&lt;/em&gt; as a category : android, java, … Although &lt;a href=&quot;https://jekyllrb.com/docs/posts/#categories-and-tags&quot;&gt;jekyll supports categories&lt;/a&gt;, I’m now using only one level of tags for the better : all tags are equals !&lt;/li&gt;
  &lt;li&gt;No custom excerpt and picture to advertise an article in the front page (&lt;a href=&quot;https://jekyllrb.com/docs/posts/#post-excerpts&quot;&gt;Jekyll has this kind of feature&lt;/a&gt; but &lt;a href=&quot;https://github.com/nicolabs/nicolabs.net/issues/14&quot;&gt;it’s not working out-of-the-box for me&lt;/a&gt;, so for now there is a short excerpt automatically extracted from the first paragraph that lacks some serious markdown parsing)&lt;/li&gt;
  &lt;li&gt;No integrated internationalization (&lt;em&gt;i18n&lt;/em&gt;) but I have only few articles in french, all others are in English, and I feel it’s not going to be a lot of work to add this feature&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-i-like&quot;&gt;What I like&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Simplicity : the default theme, the generation mechanism, the Markdown language, everything is turned towards simplicity, allowing to concentrate on content.&lt;/li&gt;
  &lt;li&gt;This is really close to the ideal blogging platform I was looking for my ‘work in progress’ blog concept (i.e. even drafts are published and articles are always evolving)&lt;/li&gt;
  &lt;li&gt;Integrates very well with Atom and its &lt;em&gt;git&lt;/em&gt; &amp;amp; &lt;em&gt;markdown preview&lt;/em&gt; plugins&lt;/li&gt;
  &lt;li&gt;Last but not least, it is a very portable platform, since it’s just offline generation of HTML files and upload. GitHub automates the build so I don’t really upload generated files but to go over some limitations they put on &lt;em&gt;GitHub Pages&lt;/em&gt; I may simply change hosting and then really push offline-generated content. That’s &lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS&lt;/a&gt;. Also static site generation not limited to Jekyll, &lt;a href=&quot;https://blog.jim-nielsen.com/2018/choosing-a-static-site-generator/&quot;&gt;there are other&lt;/a&gt; &lt;a href=&quot;https://github.com/myles/awesome-static-generators#photography&quot;&gt;very promising&lt;/a&gt; engines, even distributed ones…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-i-dont-like&quot;&gt;What I don’t like&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;On GitHub Pages there is &lt;em&gt;only one&lt;/em&gt; theme, &lt;em&gt;only one&lt;/em&gt; markdown engine : GitHub surely needs to rationalize services it provides but on my side I hope it will not lead to dead ends and migration to another host…&lt;/li&gt;
  &lt;li&gt;No &lt;em&gt;autolink&lt;/em&gt; feature for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kramdown&lt;/code&gt;, the only supported markdown engine on GitHub Pages, which would have saved me from rewriting all links that had just their own URL as text. By the way I therefore rewrote the links’ text trimming the redundant “http://” or “www” parts, making the text more readable. For the record, I was able to do this with this single &lt;em&gt;regular expression&lt;/em&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s/(https?:\/\/)(www\.)?([^\s$]+)/[$3]($1$2$3)/g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>nicobo</name></author><category term="blogging" /><category term="drupal" /><category term="github" /><category term="jekyll" /><category term="web design" /><summary type="html">New blog concept ? I write articles about things that required enough amount of work for them to be considered worth sharing. Writing, in turn, also require a fair amount of work to be comprehensive and accurate enough. I have to admit however that I don’t have time to write advanced articles as much as I would like to. Many of them just stay unfinished in a draft state, never published… Therefore this blog is going to show shorter (and some unfinished) articles ! The good news is that some content that was hidden, in draft state, is going to be live ! A first approach was to simply use a git branch to put drafts (usually named ‘develop’), then merge them into the ‘master’ branch ; but that would imply either to publish two blogs : ‘draft’ and ‘release’ or to create a mechanism to merge the two branches into the same blog. I finally opted for a label in each article indicating its maturity level : draft A draft label means something like “This article is in the process of being written, take it carefully as it may be wrong or change tomorrow”. I don’t endorse the content of such articles even if published, however one may find its content useful in some way… good An article with a good maturity is one that I consider ready for publication, even if it has some minor flaws or missing parts. stable Stable articles are the ones that have been published for a long time or that I consider rock-solid. deprecated Some articles may explicitly be labeled as deprecated in order to emphasize the fact that they have deprecated content and should only be considered by people living in the past. Deprecation might not be a concept that suits perfectly within a maturity life cycle like previous labels, but for now I prefer keeping things simple and not using another tagging system. Please note that some articles may show a stable maturity while talking about deprecated things. This is because an article may still be relevant even when talking about supplanted technologies, and also because I’m not going to constantly review old articles to check if they’re still at the cutting edge… Scaffolding the Web 2.0 is a very good example of that case. In order to get an idea of the freshness of an article, I therefore print both its creation and last update times, allowing people to judge by themselves if it’s likely to be up-to-date or not. The paradigm I was fond of is therefore changing : a permanent URL on this blog still leads to the same article, but its content can definitely change (and break referring sources). In order to reference a content at a given fixed time, one can link to the original content on GitHub : there is a link to the full history of each article over their creation and update times labels (try with this one). Lastly, I still use the drafts feature of Jekyll to prevent publishing of very early notes that are just ideas or not even readable… Those can still be viewed in GitHub sources, but are not publicly rendered (I have a special unpublished label for myself). Migrating paths Beside changing the concept, I’m also changing the platform, moving from self-hosted Drupal to Jekyll on GitHub Pages. During this migration I’ve tried to keep the old URLs still valid by keeping a way to make it through HTTP redirects. Mostly for fun. Assets (images) are moved to /assets/blog/... and specified as is in the markdown sources. I could have used Jekyll’s features to insert some variable but I did not want to add too much non-markdown (and framework-specific) code in the articles’ source. If the assets were to move again, it should be quite easy to replace all /assets/blog/... strings with the correct path. I’ve used Jekyll’s permalink option to keep the short URL of the articles so I just have to add an HTTP redirect to serve the new blog under the old URLs. There is a screenshot of what the previous blog at nicobo.net was looking like : screenshot. What’s lost From rich HTML to Markdown, I’ve lost some of the visual/semantic styles I was using : I had to merge or get rid of some of them. Actually I must say that this does not really look like a bad thing : they were not critical to the meaning of the text and it’s easier to concentrate on the content itself. Lack of underlining in Markdown : I’ve used normal (*) or strong (**) emphasis file names and commands used to have separate styles : although I miss this one a bit, I am now enclosing both of them in back ticks (`) and saving some seconds thinking about which style to use here. I used to have 2 types of block quotes : notes and warnings. I am now using markdown quotes (&amp;gt;) for both, emphasizing important words for warnings types Pictures and text layout is now only a vertical flow : I don’t really care as it’s always been for pure visual left/right/center alignment and I used to spend a significant time building it. Most of the visual helps I used to render with CSS are now back as indications in the text. E.g. I could emphasize portions of code to make the reader focus on them ; now I just describe them right before/after the code I was using a main tag as a category : android, java, … Although jekyll supports categories, I’m now using only one level of tags for the better : all tags are equals ! No custom excerpt and picture to advertise an article in the front page (Jekyll has this kind of feature but it’s not working out-of-the-box for me, so for now there is a short excerpt automatically extracted from the first paragraph that lacks some serious markdown parsing) No integrated internationalization (i18n) but I have only few articles in french, all others are in English, and I feel it’s not going to be a lot of work to add this feature What I like Simplicity : the default theme, the generation mechanism, the Markdown language, everything is turned towards simplicity, allowing to concentrate on content. This is really close to the ideal blogging platform I was looking for my ‘work in progress’ blog concept (i.e. even drafts are published and articles are always evolving) Integrates very well with Atom and its git &amp;amp; markdown preview plugins Last but not least, it is a very portable platform, since it’s just offline generation of HTML files and upload. GitHub automates the build so I don’t really upload generated files but to go over some limitations they put on GitHub Pages I may simply change hosting and then really push offline-generated content. That’s KISS. Also static site generation not limited to Jekyll, there are other very promising engines, even distributed ones… What I don’t like On GitHub Pages there is only one theme, only one markdown engine : GitHub surely needs to rationalize services it provides but on my side I hope it will not lead to dead ends and migration to another host… No autolink feature for kramdown, the only supported markdown engine on GitHub Pages, which would have saved me from rewriting all links that had just their own URL as text. By the way I therefore rewrote the links’ text trimming the redundant “http://” or “www” parts, making the text more readable. For the record, I was able to do this with this single regular expression : s/(https?:\/\/)(www\.)?([^\s$]+)/[$3]($1$2$3)/g</summary></entry><entry><title type="html">Python versus Shell scripting : from experience</title><link href="https://www.nicolabs.net/articles/python-versus-shell-scripting-experience" rel="alternate" type="text/html" title="Python versus Shell scripting : from experience" /><published>2015-11-08T14:24:13+01:00</published><updated>2015-11-08T14:24:13+01:00</updated><id>https://www.nicolabs.net/articles/Python-versus-Shell-scripting-from-experience</id><content type="html" xml:base="https://www.nicolabs.net/articles/python-versus-shell-scripting-experience">&lt;p&gt;&lt;img src=&quot;/assets/blog/Selection_008.png&quot; alt=&quot;Python vs Shell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A quick “pros &amp;amp; cons” to choose between Python or Shell scripting, from what I’ve observed through the years.&lt;/p&gt;

&lt;p&gt;This could probably apply to other high level script languages* vs shell.&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;Like Ruby, but not like Perl, as it shares more with shells from my point of view, like unreadable syntax and execution speed.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;choose-python-for-&quot;&gt;Choose Python for :&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;its simple syntax&lt;/strong&gt; : can be read even by non Python-speaking people. End users may not be scared to change scripts to fit their need.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;portability&lt;/strong&gt; : Python is actually more portable than shell because it’s easy to install on any OS. Shell is theoretically portable but it’s complicated to explain end users how to install the runtime (e.g. see cygwin). A Python script can be packaged into an executable program. There may be ways to bundle a script with the shell runtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;choose-shell-for-&quot;&gt;Choose Shell for :&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;speed&lt;/strong&gt; : except in case of bad code logic, shell scripts are usually a lot faster than Python’s equivalents.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;its ease to deal with external programs and system&lt;/strong&gt; : shell’s syntax is already made to test/pipe/chain easily existing programs, whereas Python requires some extra boilerplate. Shell also has built-in functions to deal directly with files and the system, whereas Python uses an object-oriented model, which may not be as handy.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>nicobo</name></author><category term="python" /><category term="scripting" /><category term="shell" /><summary type="html">A quick “pros &amp;amp; cons” to choose between Python or Shell scripting, from what I’ve observed through the years. This could probably apply to other high level script languages* vs shell. * Like Ruby, but not like Perl, as it shares more with shells from my point of view, like unreadable syntax and execution speed. Choose Python for : its simple syntax : can be read even by non Python-speaking people. End users may not be scared to change scripts to fit their need. portability : Python is actually more portable than shell because it’s easy to install on any OS. Shell is theoretically portable but it’s complicated to explain end users how to install the runtime (e.g. see cygwin). A Python script can be packaged into an executable program. There may be ways to bundle a script with the shell runtime. Choose Shell for : speed : except in case of bad code logic, shell scripts are usually a lot faster than Python’s equivalents. its ease to deal with external programs and system : shell’s syntax is already made to test/pipe/chain easily existing programs, whereas Python requires some extra boilerplate. Shell also has built-in functions to deal directly with files and the system, whereas Python uses an object-oriented model, which may not be as handy.</summary></entry><entry><title type="html">Sass is a CSS compiler</title><link href="https://www.nicolabs.net/2015/Sass-is-a-CSS-compiler" rel="alternate" type="text/html" title="Sass is a CSS compiler" /><published>2015-03-28T17:18:57+01:00</published><updated>2019-04-26T00:00:00+02:00</updated><id>https://www.nicolabs.net/2015/Sass-is-a-CSS-compiler</id><content type="html" xml:base="https://www.nicolabs.net/2015/Sass-is-a-CSS-compiler">&lt;p&gt;&lt;img src=&quot;/assets/blog/sass-color-1c4aab2b.png&quot; alt=&quot;Sass logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A year ago I was very excited to get my hands at &lt;em&gt;Sass&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I thought it could fill the gaps in coding with CSS : preventing variables duplications, automatic generation of multiple static stylesheets depending on the rendering device (vs using media queries which are not always supported and require downloading all versions of the code)…&lt;/p&gt;

&lt;p&gt;But it could not.&lt;/p&gt;

&lt;h2 id=&quot;what-really-is-saas&quot;&gt;What really is Saas&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass-lang.com&lt;/a&gt; states it is a “CSS extension language”, but don’t take it literaly or you will head straight for failure.&lt;/p&gt;

&lt;p&gt;That would imply that Sass adds instructions to the CSS language ; however it’s not right because web browsers today only understand CSS, not Sass.&lt;/p&gt;

&lt;p&gt;Sass is nothing but dynamic : it’s a pre-processor that may only really be used to offline-produce different versions of a CSS with different sizes, colors and layouts, but it’s not able to make your CSS dynamic. It’s just several static versions of CSS that you must still dynamically/selectively load using an external mechanism (like static media queries or Javascript).&lt;/p&gt;

&lt;p&gt;I fell into this trap as I tried to organize stylesheets with inheritance like in &lt;strong&gt;o&lt;/strong&gt;bject &lt;strong&gt;o&lt;/strong&gt;riented languages (&lt;em&gt;OO&lt;/em&gt;) : this structure would always failed at a given point.&lt;/p&gt;

&lt;p&gt;For instance : as variables only live in the Sass context, and disappear in the compiled CSS, if you want to make two versions of a stylesheet with different values of the same variable, you only have one option : build a CSS block or stylesheet for each value. There is no added value using Sass variables in media queries because they will just be replaced with their static, final value.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Make no mistake : Sass is a very helpful evolution for CSS, &lt;strong&gt;use it&lt;/strong&gt;, but &lt;strong&gt;know its limits&lt;/strong&gt; !&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://designshack.net/articles/css/sass-and-media-queries-what-you-can-and-cant-do/&quot;&gt;designshack.net/articles/css/sass-and-media-queries-what-you-can-and-cant-do&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.thesassway.com/intermediate/responsive-web-design-part-2&quot;&gt;thesassway.com/intermediate/responsive-web-design-part-2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>nicobo</name></author><category term="css" /><category term="graphism" /><category term="media queries" /><category term="sass" /><category term="web design" /><summary type="html">A year ago I was very excited to get my hands at Sass. I thought it could fill the gaps in coding with CSS : preventing variables duplications, automatic generation of multiple static stylesheets depending on the rendering device (vs using media queries which are not always supported and require downloading all versions of the code)… But it could not. What really is Saas Sass-lang.com states it is a “CSS extension language”, but don’t take it literaly or you will head straight for failure. That would imply that Sass adds instructions to the CSS language ; however it’s not right because web browsers today only understand CSS, not Sass. Sass is nothing but dynamic : it’s a pre-processor that may only really be used to offline-produce different versions of a CSS with different sizes, colors and layouts, but it’s not able to make your CSS dynamic. It’s just several static versions of CSS that you must still dynamically/selectively load using an external mechanism (like static media queries or Javascript). I fell into this trap as I tried to organize stylesheets with inheritance like in object oriented languages (OO) : this structure would always failed at a given point. For instance : as variables only live in the Sass context, and disappear in the compiled CSS, if you want to make two versions of a stylesheet with different values of the same variable, you only have one option : build a CSS block or stylesheet for each value. There is no added value using Sass variables in media queries because they will just be replaced with their static, final value. Conclusion Make no mistake : Sass is a very helpful evolution for CSS, use it, but know its limits ! References designshack.net/articles/css/sass-and-media-queries-what-you-can-and-cant-do thesassway.com/intermediate/responsive-web-design-part-2</summary></entry><entry><title type="html">Scaffolding the Web 2.0</title><link href="https://www.nicolabs.net/articles/scaffolding-web-20" rel="alternate" type="text/html" title="Scaffolding the Web 2.0" /><published>2015-01-29T23:52:38+01:00</published><updated>2015-01-29T23:52:38+01:00</updated><id>https://www.nicolabs.net/articles/Scaffolding-the-Web-2.0</id><content type="html" xml:base="https://www.nicolabs.net/articles/scaffolding-web-20">&lt;h2 id=&quot;starting-up-with-web-20-development-&quot;&gt;Starting up with Web 2.0 development ?&lt;/h2&gt;

&lt;p&gt;Let’s choose between three essentials tools to begin a new project !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/h5bp.png&quot; alt=&quot;h5bp&quot; class=&quot;inline&quot; height=&quot;120px&quot; width=&quot;120px&quot; /&gt; &lt;img src=&quot;/assets/blog/html5-logo-165.png&quot; alt=&quot;initializr&quot; class=&quot;inline&quot; height=&quot;120px&quot; width=&quot;120px&quot; /&gt; &lt;img src=&quot;/assets/blog/yeoman.png&quot; alt=&quot;yeoman&quot; class=&quot;inline&quot; height=&quot;120px&quot; width=&quot;120px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-html5-boilerplate&quot;&gt;&lt;img src=&quot;/assets/blog/h5bp-logo.png&quot; alt=&quot;H5BP logo (star)&quot; class=&quot;inline&quot; style=&quot;vertical-align:middle;&quot; /&gt; HTML5 Boilerplate&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HTML5 Boilerplate&lt;/strong&gt; (a.k.a. &lt;em&gt;H5BP&lt;/em&gt;) is the original scaffolding tool by Paul Irish &amp;amp; Co (will have to search for the exact history…).&lt;/p&gt;

&lt;p&gt;It allows you to build a clean website structure with standard features based on best practices like :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;responsive design-ready CSS&lt;/li&gt;
  &lt;li&gt;standard javascript libraries : Modernizr, Respond.js, …&lt;/li&gt;
  &lt;li&gt;404 page&lt;/li&gt;
  &lt;li&gt;Google Analytics&lt;/li&gt;
  &lt;li&gt;favicons for apple&lt;/li&gt;
  &lt;li&gt;many more…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It does not support CSS preprocessing (SASS, …) and requires you some effort to upgrade to the latest version later (by separating your work from the original files that will be upgraded)…&lt;/p&gt;

&lt;p&gt;It’s good for &lt;strong&gt;small&lt;/strong&gt; sites.&lt;/p&gt;

&lt;p&gt;Find it at &lt;a href=&quot;http://html5boilerplate.com&quot;&gt;html5boilerplate.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;-initializr&quot;&gt;&lt;img src=&quot;/assets/blog/html5-logo-165.png&quot; alt=&quot;Initializr logo&quot; class=&quot;inline&quot; style=&quot;vertical-align:middle;&quot; height=&quot;80px&quot; /&gt; Initializr&lt;/h2&gt;

&lt;p&gt;While &lt;em&gt;H5BP&lt;/em&gt; is a static project template to download, &lt;strong&gt;Initializr&lt;/strong&gt; allows you to customize it by selecting the features you want on your site and then downloading the generated files.&lt;/p&gt;

&lt;p&gt;It has 3 ready-to-use configurations :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Classic H5BP&lt;/li&gt;
  &lt;li&gt;Responsive (using a custom framework by &lt;a href=&quot;https://github.com/verekia&quot;&gt;@verekia&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;(Twitter) Bootstrap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The customization is made online and on-the-fly : you can see the generated files directly online while filtering the features (“What’s inside” button).
It still does not support CSS preprocessing.&lt;/p&gt;

&lt;p&gt;Since it’s simply a “configurator” over H5BP I find it &lt;strong&gt;more convenient&lt;/strong&gt; than H5BP alone &lt;strong&gt;for small sites&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Find it at &lt;a href=&quot;http://www.initializr.com&quot;&gt;initializr.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;-yeoman&quot;&gt;&lt;img src=&quot;/assets/blog/yeoman-1.svg&quot; alt=&quot;Yeoman logo&quot; class=&quot;inline&quot; style=&quot;vertical-align:middle;&quot; height=&quot;80px&quot; /&gt; Yeoman&lt;/h2&gt;

&lt;p&gt;To solve the “static template” issue, &lt;em&gt;H5BP&lt;/em&gt; first evolved into “&lt;a href=&quot;https://github.com/h5bp/generator-mobile-boilerplate&quot;&gt;generator-mobile-boilerplate&lt;/a&gt;”, then into several specialized tools now known as “&lt;strong&gt;Yeoman&lt;/strong&gt;”.&lt;/p&gt;

&lt;p&gt;Those tools bring the features you usually want on any project :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;yo&lt;/strong&gt; scaffolds your project (like a &lt;em&gt;Maven archetype&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Grunt&lt;/strong&gt; and &lt;strong&gt;Gulp&lt;/strong&gt; build and execute it (like &lt;em&gt;Maven&lt;/em&gt; / &lt;em&gt;Ant&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bower&lt;/strong&gt; and &lt;strong&gt;npm&lt;/strong&gt; handle dependencies (like &lt;em&gt;Maven&lt;/em&gt; / &lt;em&gt;Ivy&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, Yeoman is the &lt;strong&gt;standard&lt;/strong&gt;, complete tool suite for Web 2.0 developers like Maven is for Java developers.&lt;/p&gt;

&lt;p&gt;Find it at &lt;a href=&quot;http://yeoman.io&quot;&gt;yeoman.io&lt;/a&gt;&lt;/p&gt;</content><author><name>nicobo</name></author><category term="ant" /><category term="bower" /><category term="grunt" /><category term="gulp" /><category term="h5bp" /><category term="HTML5" /><category term="initializr" /><category term="java" /><category term="maven" /><category term="npm" /><category term="sass" /><category term="scaffolding" /><category term="web design" /><category term="yeoman" /><category term="yo" /><summary type="html">Starting up with Web 2.0 development ? Let’s choose between three essentials tools to begin a new project ! HTML5 Boilerplate HTML5 Boilerplate (a.k.a. H5BP) is the original scaffolding tool by Paul Irish &amp;amp; Co (will have to search for the exact history…). It allows you to build a clean website structure with standard features based on best practices like : responsive design-ready CSS standard javascript libraries : Modernizr, Respond.js, … 404 page Google Analytics favicons for apple many more… It does not support CSS preprocessing (SASS, …) and requires you some effort to upgrade to the latest version later (by separating your work from the original files that will be upgraded)… It’s good for small sites. Find it at html5boilerplate.com Initializr While H5BP is a static project template to download, Initializr allows you to customize it by selecting the features you want on your site and then downloading the generated files. It has 3 ready-to-use configurations : Classic H5BP Responsive (using a custom framework by @verekia) (Twitter) Bootstrap The customization is made online and on-the-fly : you can see the generated files directly online while filtering the features (“What’s inside” button). It still does not support CSS preprocessing. Since it’s simply a “configurator” over H5BP I find it more convenient than H5BP alone for small sites. Find it at initializr.com Yeoman To solve the “static template” issue, H5BP first evolved into “generator-mobile-boilerplate”, then into several specialized tools now known as “Yeoman”. Those tools bring the features you usually want on any project : yo scaffolds your project (like a Maven archetype) Grunt and Gulp build and execute it (like Maven / Ant) Bower and npm handle dependencies (like Maven / Ivy) In short, Yeoman is the standard, complete tool suite for Web 2.0 developers like Maven is for Java developers. Find it at yeoman.io</summary></entry><entry><title type="html">Pinned PortableApps on Windows 7</title><link href="https://www.nicolabs.net/articles/pinned-portableapps-windows-7" rel="alternate" type="text/html" title="Pinned PortableApps on Windows 7" /><published>2014-05-20T09:10:45+02:00</published><updated>2014-05-20T09:10:45+02:00</updated><id>https://www.nicolabs.net/articles/Pinned-PortableApps-on-Windows-7</id><content type="html" xml:base="https://www.nicolabs.net/articles/pinned-portableapps-windows-7">&lt;p&gt;If you are using &lt;em&gt;PortableApps&lt;/em&gt;, you might have noticed that some programs like &lt;em&gt;Firefox&lt;/em&gt; or &lt;em&gt;PuTTY&lt;/em&gt; launched from Windows 7’s task bar starts the system wide installation instead of the PortableApps’s one.&lt;/p&gt;

&lt;p&gt;This is because when you pin a program to the task bar, it uses the executable of the current process, and with &lt;em&gt;PortableApps&lt;/em&gt; this executable is not the same as the launcher, which takes care of loading the portable configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/win7_taskbar_pinned_putty.png&quot; alt=&quot;Putty shortcut&quot; /&gt;&lt;/p&gt;

&lt;p&gt;=&amp;gt; edit the shortcut to use the parent executable, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Tools\PortablePuTTY\PortablePuTTY.exe&lt;/code&gt; for instance.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://answers.microsoft.com/en-us/windows/forum/windows_7-desktop/windows-7-taskbar-pinned-items-have-disappeared/a978bf01-e4ce-4a53-ac42-cfcef1aca00&quot;&gt;answers.microsoft.com/en-us/windows/forum/windows_7-desktop/windows-7-taskbar-pinned-items-have-disappeared/a978bf01-e4ce-4a53-ac42-cfcef1aca00&lt;/a&gt;&lt;/p&gt;</content><author><name>nicobo</name></author><category term="portable" /><category term="PortableApps" /><category term="tooling" /><category term="Windows" /><summary type="html">If you are using PortableApps, you might have noticed that some programs like Firefox or PuTTY launched from Windows 7’s task bar starts the system wide installation instead of the PortableApps’s one. This is because when you pin a program to the task bar, it uses the executable of the current process, and with PortableApps this executable is not the same as the launcher, which takes care of loading the portable configuration. =&amp;gt; edit the shortcut to use the parent executable, like C:\Tools\PortablePuTTY\PortablePuTTY.exe for instance. See answers.microsoft.com/en-us/windows/forum/windows_7-desktop/windows-7-taskbar-pinned-items-have-disappeared/a978bf01-e4ce-4a53-ac42-cfcef1aca00</summary></entry><entry><title type="html">How to cook an egg with a Gimp</title><link href="https://www.nicolabs.net/articles/how-cook-egg-gimp" rel="alternate" type="text/html" title="How to cook an egg with a Gimp" /><published>2013-06-15T13:44:22+02:00</published><updated>2013-06-15T13:44:22+02:00</updated><id>https://www.nicolabs.net/articles/How-to-cook-an-egg-with-a-Gimp</id><content type="html" xml:base="https://www.nicolabs.net/articles/how-cook-egg-gimp">&lt;p&gt;&lt;img src=&quot;/assets/blog/egg-evolution_0.png&quot; alt=&quot;The egg evolves !&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a tutorial to draw an egg with &lt;a href=&quot;http://www.gimp.org/&quot;&gt;Gimp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the following techniques, you will be able to build a realistic egg for a serious business &lt;strong&gt;(!)&lt;/strong&gt; as well as a cartoonish one typically for a gamification usage &lt;strong&gt;;-)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You will find the full Gimp source attached to this article, which I invite you to reuse at will.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Being a casual user of Gimp, there might be better approaches to get it done.
For instance, if you’re looking for a way to quickly build a textured egg, have a look at this tutorial : &lt;a href=&quot;http://www.gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp/&quot;&gt;gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-shape&quot;&gt;The shape&lt;/h2&gt;

&lt;p&gt;The first step is to draw the shape of our egg.&lt;/p&gt;

&lt;p&gt;You can do it in different ways :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reuse an existing template (this is what I’ve done for this tutorial : &lt;a href=&quot;http://elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html&quot;&gt;elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Use a dedicated plug-in (e.g. &lt;a href=&quot;http://www.gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038&quot;&gt;gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Use the Ellipse tool in combination with others (not tested)&lt;/li&gt;
  &lt;li&gt;Directly use the Sphere designer tool (not tested)&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As all subsequent steps depend on this one, make sur you get the exact shape you want before going on the next chapter. Especially check that the image resolution is high enough.&lt;/p&gt;

&lt;p&gt;If you need a high resolution I would suggest you build your own image from scratch, as the attached Gimp source is quite low-res. You could use the aforementioned plugin for instance.
As an example, for Android application icons, &lt;a href=&quot;https://developer.android.com/guide/practices/ui_guidelines/icon_design.html#design-tips&quot;&gt;a 864x864 resolution is recommended&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/shape.png&quot; alt=&quot;The egg is taking shape...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-volume&quot;&gt;The volume&lt;/h2&gt;

&lt;p&gt;The main idea to simulate a volume is to apply a shading (yes : in drawing, everything is impression !).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This part of the tutorial probably deserves some enhancement because it has the undesired side effect to blacken colors instead of darkening them. The “Sphere designer” tool might be of a great help to solve this issue (see link at the end).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;the-edges&quot;&gt;The edges&lt;/h3&gt;

&lt;p&gt;To create this volume effect we are first going to select the drawn shapeand apply the &lt;em&gt;“Light and Shadow &amp;gt; Drop Shadow”&lt;/em&gt; filter with a null offset (x=0, y=0).
This will make the edges visibly come out of the sheet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/edges.png&quot; alt=&quot;The egg is MORE that an surface...&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-surface&quot;&gt;The surface&lt;/h3&gt;

&lt;p&gt;In order to suggest the plumper shape of the egg, we are going to add a new shading, this time made with another technique : we will create a light effect that we will transform into a darkening effect.&lt;/p&gt;

&lt;p&gt;In order to do this, select the &lt;em&gt;“Light and Shadow &amp;gt; Lighting Effects”&lt;/em&gt; filter and tune the parameters to get the desired effect. The integrated preview of this plug-in is very useful..&lt;/p&gt;

&lt;p&gt;For this tutorial I’ve put the light source right at the center of the egg and tuned the parameters so that the light quickly disappear on its edges.&lt;/p&gt;

&lt;p&gt;Once the effect applied, choose menu &lt;em&gt;“Color &amp;gt; Color to Alpha”&lt;/em&gt; and select the color of the light (white, usually) : the picture becomes then an alpha layer that will make the volume appear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/lighting-shadow.png&quot; alt=&quot;The egg is round...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-lighting&quot;&gt;The lighting&lt;/h2&gt;

&lt;p&gt;In order to give a realistic appearence, we will add a diffuse light with the &lt;em&gt;“Light and Shadow &amp;gt; Lighting Effects”&lt;/em&gt; tool.
It is possible to apply several light sources depending on the final scene where the egg will be put. If the egg is white, chose another lighting color.&lt;/p&gt;

&lt;p&gt;As a way to suggest a shiny and bright aspect to the shell, we can add a reflect, simply made of a semi-transparent white ellipse.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/lighting.png&quot; alt=&quot;The egg is in the place...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-cartoon-effect&quot;&gt;The cartoon effect&lt;/h2&gt;

&lt;p&gt;Usually we can give a ‘cartoon’ effect by adding more importance to the lines.&lt;/p&gt;

&lt;p&gt;In our case the first thing to do is to increase the width of the edges : that is easilly done with the &lt;em&gt;“Select &amp;gt; Border”&lt;/em&gt; tool.&lt;/p&gt;

&lt;p&gt;It’s also possible to enhance the shadings by tuning the transparency level and increasing colors intensity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/cartoon.png&quot; alt=&quot;The egg is drawn...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When sizing down the picture, don’t use antialiasing so you get pixel-perfect edges on a transparent background.&lt;/p&gt;

&lt;h2 id=&quot;the-texture&quot;&gt;The texture&lt;/h2&gt;

&lt;p&gt;One of the reasons why I’ve built this egg was to be able to build a series of eggs decorated in different ways for different events.&lt;/p&gt;

&lt;p&gt;A method to place a texture on the shell is to use the &lt;em&gt;“Filters &amp;gt; &lt;a href=&quot;http://gmic.sourceforge.net/&quot;&gt;G’MIC&lt;/a&gt; &amp;gt; Deformations &amp;gt; Fish-eye”&lt;/em&gt; plug-in.&lt;/p&gt;

&lt;p&gt;One can easily get the expected result by applying this filter to the layer where the texture is.
Although it does not distort the picture exactly as an egg, the difference is not noticeable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/texture.png&quot; alt=&quot;The egg is dressed up...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reusing&quot;&gt;Reusing&lt;/h2&gt;

&lt;p&gt;It’s over for those tips ; I allow (and encourage) whoever to reuse this picture and to modify it for a personnal or commercial usage.&lt;/p&gt;

&lt;p&gt;Take profit of the attached Gimp source and don’t hesitate to give me feedback if you’re using it : I would be very happy to hear about it !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/egg-real.png&quot; alt=&quot;The egg is free...&quot; /&gt; &lt;img src=&quot;/assets/blog/pictures/egg-cartoon.png&quot; alt=&quot;The egg is free...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Download the source : &lt;a href=&quot;/assets/blog/egg.xcf&quot;&gt;egg.xcf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Gimp - &lt;a href=&quot;http://www.gimp.org/&quot;&gt;gimp.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Egg shape plug-in - &lt;a href=&quot;http://www.gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038&quot;&gt;gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;G’MIC plug-in - &lt;a href=&quot;http://gmic.sourceforge.net/&quot;&gt;gmic.sourceforge.net&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Android Icon Design Guidelines - &lt;a href=&quot;https://developer.android.com/guide/practices/ui_guidelines/icon_design.html&quot;&gt;developer.android.com/guide/practices/ui_guidelines/icon_design.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;French tutorials and shape template - &lt;a href=&quot;http://elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html&quot;&gt;elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Eggs icons - &lt;a href=&quot;http://www.softicons.com/search?search=egg&quot;&gt;softicons.com/search?search=egg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Video tutorial - &lt;a href=&quot;https://www.youtube.com/watch?v=0c-hMz2XpP8&quot;&gt;youtube.com/watch?v=0c-hMz2XpP8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Great tutorial to texturing an egg - &lt;a href=&quot;http://www.gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp/&quot;&gt;gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>nicobo</name></author><category term="absync" /><category term="gimp" /><category term="graphism" /><summary type="html">Here is a tutorial to draw an egg with Gimp. With the following techniques, you will be able to build a realistic egg for a serious business (!) as well as a cartoonish one typically for a gamification usage ;-) You will find the full Gimp source attached to this article, which I invite you to reuse at will. Being a casual user of Gimp, there might be better approaches to get it done. For instance, if you’re looking for a way to quickly build a textured egg, have a look at this tutorial : gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp The shape The first step is to draw the shape of our egg. You can do it in different ways : Reuse an existing template (this is what I’ve done for this tutorial : elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html) Use a dedicated plug-in (e.g. gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038) Use the Ellipse tool in combination with others (not tested) Directly use the Sphere designer tool (not tested) … As all subsequent steps depend on this one, make sur you get the exact shape you want before going on the next chapter. Especially check that the image resolution is high enough. If you need a high resolution I would suggest you build your own image from scratch, as the attached Gimp source is quite low-res. You could use the aforementioned plugin for instance. As an example, for Android application icons, a 864x864 resolution is recommended. The volume The main idea to simulate a volume is to apply a shading (yes : in drawing, everything is impression !). This part of the tutorial probably deserves some enhancement because it has the undesired side effect to blacken colors instead of darkening them. The “Sphere designer” tool might be of a great help to solve this issue (see link at the end). The edges To create this volume effect we are first going to select the drawn shapeand apply the “Light and Shadow &amp;gt; Drop Shadow” filter with a null offset (x=0, y=0). This will make the edges visibly come out of the sheet. The surface In order to suggest the plumper shape of the egg, we are going to add a new shading, this time made with another technique : we will create a light effect that we will transform into a darkening effect. In order to do this, select the “Light and Shadow &amp;gt; Lighting Effects” filter and tune the parameters to get the desired effect. The integrated preview of this plug-in is very useful.. For this tutorial I’ve put the light source right at the center of the egg and tuned the parameters so that the light quickly disappear on its edges. Once the effect applied, choose menu “Color &amp;gt; Color to Alpha” and select the color of the light (white, usually) : the picture becomes then an alpha layer that will make the volume appear. The lighting In order to give a realistic appearence, we will add a diffuse light with the “Light and Shadow &amp;gt; Lighting Effects” tool. It is possible to apply several light sources depending on the final scene where the egg will be put. If the egg is white, chose another lighting color. As a way to suggest a shiny and bright aspect to the shell, we can add a reflect, simply made of a semi-transparent white ellipse. The cartoon effect Usually we can give a ‘cartoon’ effect by adding more importance to the lines. In our case the first thing to do is to increase the width of the edges : that is easilly done with the “Select &amp;gt; Border” tool. It’s also possible to enhance the shadings by tuning the transparency level and increasing colors intensity. When sizing down the picture, don’t use antialiasing so you get pixel-perfect edges on a transparent background. The texture One of the reasons why I’ve built this egg was to be able to build a series of eggs decorated in different ways for different events. A method to place a texture on the shell is to use the “Filters &amp;gt; G’MIC &amp;gt; Deformations &amp;gt; Fish-eye” plug-in. One can easily get the expected result by applying this filter to the layer where the texture is. Although it does not distort the picture exactly as an egg, the difference is not noticeable. Reusing It’s over for those tips ; I allow (and encourage) whoever to reuse this picture and to modify it for a personnal or commercial usage. Take profit of the attached Gimp source and don’t hesitate to give me feedback if you’re using it : I would be very happy to hear about it ! Download the source : egg.xcf References Gimp - gimp.org Egg shape plug-in - gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038 G’MIC plug-in - gmic.sourceforge.net Android Icon Design Guidelines - developer.android.com/guide/practices/ui_guidelines/icon_design.html French tutorials and shape template - elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html Eggs icons - softicons.com/search?search=egg Video tutorial - youtube.com/watch?v=0c-hMz2XpP8 Great tutorial to texturing an egg - gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp</summary></entry><entry><title type="html">Comment préparer un oeuf avec Gimp</title><link href="https://www.nicolabs.net/fr/articles/un-oeuf-avec-gimp" rel="alternate" type="text/html" title="Comment préparer un oeuf avec Gimp" /><published>2013-06-15T13:44:22+02:00</published><updated>2013-06-15T13:44:22+02:00</updated><id>https://www.nicolabs.net/fr/articles/How-to-cook-an-egg-with-a-Gimp</id><content type="html" xml:base="https://www.nicolabs.net/fr/articles/un-oeuf-avec-gimp">&lt;p&gt;&lt;img src=&quot;/assets/blog/egg-evolution_0.png&quot; alt=&quot;L'oeuf évolue !&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Voici un petit guide pour dessiner un oeuf avec &lt;a href=&quot;http://www.gimp.org/&quot;&gt;Gimp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Les techniques décrites ici permettent à la fois de dessiner un oeuf réaliste pour les boulots sérieux &lt;strong&gt;(!)&lt;/strong&gt; et un oeuf type “bande dessinée”, typiquement à usage de gamification &lt;strong&gt;;-)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vous trouverez le fichier Gimp complet en pièce jointe, que je vous invite à réutiliser ou à prendre comme source d’inspiration.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Etant un utilisateur occasionnel de Gimp, je ne garantis pas que les méthodes décrites dans cet article soient les plus appropriées.
En particulier, si vous cherchez à créer rapidement un oeuf plaqué d’une texture de votre choix, le tutoriel suivant devrait mieux vous satisfaire : &lt;a href=&quot;http://www.gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp/&quot;&gt;gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;la-forme&quot;&gt;La forme&lt;/h2&gt;

&lt;p&gt;La première étape consiste à dessiner le contour de l’oeuf.&lt;/p&gt;

&lt;p&gt;Il existe différentes approches :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reprendre un modèle existant (c’est la méthode que j’ai utilisée : &lt;a href=&quot;http://elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html&quot;&gt;elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Utiliser un plug-in dédié (ex : &lt;a href=&quot;http://www.gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038&quot;&gt;gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Manipuler l’outil Ellipse en combinaison avec d’autres (non testé)&lt;/li&gt;
  &lt;li&gt;Utiliser directement l’outil Sphere designer (non testé)&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il s’agit de l’étape la plus importante car tout le reste est basé sur ce calque.
Assurez-vous donc d’avoir la forme qui vous convient avant d’enchaîner les étapes suivantes : vérifiez notamment que la résolution est suffisante.&lt;/p&gt;

&lt;p&gt;Si vous avez besoin d’une résolution élevée, je vous conseille de redessiner la forme dans une image différente de celle fournie avec cet article ; vous pourriez entre autres utiliser le plug-in évoqué ci-dessus.
Pour dessiner une icône d’application Android par exemple, &lt;a href=&quot;https://developer.android.com/guide/practices/ui_guidelines/icon_design.html#design-tips&quot;&gt;une résolution de 864x864 est recommandée&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/shape.png&quot; alt=&quot;L'oeuf prend forme...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;le-volume&quot;&gt;Le volume&lt;/h2&gt;

&lt;p&gt;Le principe général pour créer une impression de volume est d’appliquer un dégradé (et oui tout n’est qu’impression dans le dessin !).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cette partie du guide est probablement celle qui mérite le plus d’être améliorée, car elle a notamment un effet de bord non désiré : elle ternit les couleurs au lieu de seulement les assombrir. Une piste intéressante est l’outil “Sphere designer”, qui permet d’appliquer un éclairage réaliste très simplement (voir le lien à la fin de cet article).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;les-bords&quot;&gt;Les bords&lt;/h3&gt;

&lt;p&gt;Pour créer un effet de volume, nous allons tout d’abord sélectionner la forme de l’oeuf dessinée précédemment et appliquer le filtre &lt;em&gt;“Ombre et Lumière &amp;gt; Ombre portée”&lt;/em&gt;, avec un décalage nul (x=0, y=0).
Cela fait ressortir l’arrondi des bords de l’oeuf.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/edges.png&quot; alt=&quot;L'oeuf est PLUS qu'une surface...&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;la-surface&quot;&gt;La surface&lt;/h3&gt;

&lt;p&gt;Afin de suggérer la forme rebondie de l’oeuf, nous allons ajouter un nouveau dégradé, réalisé cette fois selon une autre technique.
Il s’agit de créer un effet de lumière, puis de le transformer en assombrissement.&lt;/p&gt;

&lt;p&gt;Pour cela, sélectionner le filtre &lt;em&gt;“Light and Shadow &amp;gt; Lighting Effects”&lt;/em&gt; et ajuster les paramètres en fonction de l’aspect voulu. L’aperçu intégré dans ce plug-in est très utile.
Pour ma part j’ai aligné la source de lumière sur le centre de l’oeuf et ajusté les paramètres de telle manière qu’ils produisent une lumière diffuse s’estompant rapidement sur les bords de l’oeuf.&lt;/p&gt;

&lt;p&gt;Une fois l’effet de lumière appliqué, choisir le menu &lt;em&gt;“Couleur &amp;gt; Couleur vers Alpha”&lt;/em&gt; et sélectionner la couleur de la lumière (le blanc habituellement) : l’image devient alors un calque alpha donnant une impression de volume.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/lighting-shadow.png&quot; alt=&quot;L'oeuf est lisse...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;léclairage&quot;&gt;L’éclairage&lt;/h2&gt;

&lt;p&gt;Pour donner une apparence réaliste, nous allons ajouter un éclairage diffus avec l’outil &lt;em&gt;“Light and Shadow &amp;gt; Lighting Effects”&lt;/em&gt;.
Il est possible d’appliquer plusieurs sources de lumière en fonction de la scène dans laquelle l’oeuf sera présenté. Si l’oeuf est blanc, utiliser une autre couleur d’éclairage.&lt;/p&gt;

&lt;p&gt;Afin de renforcer l’aspect lisse et brillant de la coquille, nous pouvons ajouter un reflet simplement composé d’un ovale blanc rendu semi-transparent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/lighting.png&quot; alt=&quot;L'oeuf est dans la place...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;leffet-bd&quot;&gt;L’effet B.D.&lt;/h2&gt;

&lt;p&gt;En général on peut donner un effet “bande dessinée” à un dessin en accentuant les traits.&lt;/p&gt;

&lt;p&gt;Dans le cas de notre oeuf, la première chose à faire consiste à augmenter l’épaisseur du contour, ce qui est très facilement réalisé par le menu &lt;em&gt;Sélection &amp;gt; Bordure”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Il est également possible d’accentuer les dégradés en jouant sur le taux de transparence et d’intensifier les couleurs pour les faire ressortir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/cartoon.png&quot; alt=&quot;L'oeuf est dessiné...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lors du redimensionnement de l’image vers une taille plus petite, ne pas utiliser de lissage, afin d’obtenir un contour net sur un fond transparent.&lt;/p&gt;

&lt;h2 id=&quot;la-texture&quot;&gt;La texture&lt;/h2&gt;

&lt;p&gt;L’une des raisons pour laquelle je me suis lancé dans cette entreprise était de pouvoir fabriquer une série d’oeufs décorés de manière originale pour différentes occasions.&lt;/p&gt;

&lt;p&gt;Une méthode pour plaquer une texture sur l’oeuf est d’exploiter le plug-in &lt;em&gt;“Filters &amp;gt; &lt;a href=&quot;http://gmic.sourceforge.net/&quot;&gt;G’MIC&lt;/a&gt; &amp;gt; Deformations &amp;gt; Fish-eye”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On peut obtenir facilement l’effet attendu en appliquant ce filtre à un calque contenant la texture.
Bien que cet effet ne déforme pas l’image exactement selon la forme d’un oeuf, la différence n’est pas notable à l’oeil nu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/texture.png&quot; alt=&quot;L'oeuf est bien habillé...&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;réutilisation&quot;&gt;Réutilisation&lt;/h2&gt;

&lt;p&gt;Voilà pour les quelques conseils ; j’autorise (et j’encourage) quiconque à réutiliser cette image, et à la modifier pour usage personnel ou commercial.&lt;/p&gt;

&lt;p&gt;Tirez profit de l’image source au format Gimp jointe à cet article et n’hésitez pas à me remonter vos commentaires, je serais très heureux d’avoir vos retours !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/pictures/egg-real.png&quot; alt=&quot;L'oeuf est libre...&quot; /&gt;&lt;img src=&quot;/assets/blog/pictures/egg-cartoon.png&quot; alt=&quot;L'oeuf est libre...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Télécharger le fichier source : &lt;a href=&quot;/assets/blog/egg.xcf&quot;&gt;egg.xcf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;références&quot;&gt;Références&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Gimp - &lt;a href=&quot;http://www.gimp.org/&quot;&gt;gimp.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Plug-in “oeuf” - &lt;a href=&quot;http://www.gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038&quot;&gt;gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Plug-in G’MIC - &lt;a href=&quot;http://gmic.sourceforge.net/&quot;&gt;gmic.sourceforge.net&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Android Icon Design Guidelines - &lt;a href=&quot;https://developer.android.com/guide/practices/ui_guidelines/icon_design.html&quot;&gt;developer.android.com/guide/practices/ui_guidelines/icon_design.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tutoriels en français et modèle de forme - &lt;a href=&quot;http://elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html&quot;&gt;elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Icônes d’oeuf - &lt;a href=&quot;http://www.softicons.com/search?search=egg&quot;&gt;softicons.com/search?search=egg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tutoriel vidéo - &lt;a href=&quot;https://www.youtube.com/watch?v=0c-hMz2XpP8&quot;&gt;youtube.com/watch?v=0c-hMz2XpP8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Super guide pour plaquer une texture - &lt;a href=&quot;http://www.gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp/&quot;&gt;gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>nicobo</name></author><category term="absync" /><category term="gimp" /><category term="graphism" /><summary type="html">Voici un petit guide pour dessiner un oeuf avec Gimp. Les techniques décrites ici permettent à la fois de dessiner un oeuf réaliste pour les boulots sérieux (!) et un oeuf type “bande dessinée”, typiquement à usage de gamification ;-) Vous trouverez le fichier Gimp complet en pièce jointe, que je vous invite à réutiliser ou à prendre comme source d’inspiration. Etant un utilisateur occasionnel de Gimp, je ne garantis pas que les méthodes décrites dans cet article soient les plus appropriées. En particulier, si vous cherchez à créer rapidement un oeuf plaqué d’une texture de votre choix, le tutoriel suivant devrait mieux vous satisfaire : gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp La forme La première étape consiste à dessiner le contour de l’oeuf. Il existe différentes approches : Reprendre un modèle existant (c’est la méthode que j’ai utilisée : elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html) Utiliser un plug-in dédié (ex : gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038) Manipuler l’outil Ellipse en combinaison avec d’autres (non testé) Utiliser directement l’outil Sphere designer (non testé) … Il s’agit de l’étape la plus importante car tout le reste est basé sur ce calque. Assurez-vous donc d’avoir la forme qui vous convient avant d’enchaîner les étapes suivantes : vérifiez notamment que la résolution est suffisante. Si vous avez besoin d’une résolution élevée, je vous conseille de redessiner la forme dans une image différente de celle fournie avec cet article ; vous pourriez entre autres utiliser le plug-in évoqué ci-dessus. Pour dessiner une icône d’application Android par exemple, une résolution de 864x864 est recommandée. Le volume Le principe général pour créer une impression de volume est d’appliquer un dégradé (et oui tout n’est qu’impression dans le dessin !). Cette partie du guide est probablement celle qui mérite le plus d’être améliorée, car elle a notamment un effet de bord non désiré : elle ternit les couleurs au lieu de seulement les assombrir. Une piste intéressante est l’outil “Sphere designer”, qui permet d’appliquer un éclairage réaliste très simplement (voir le lien à la fin de cet article). Les bords Pour créer un effet de volume, nous allons tout d’abord sélectionner la forme de l’oeuf dessinée précédemment et appliquer le filtre “Ombre et Lumière &amp;gt; Ombre portée”, avec un décalage nul (x=0, y=0). Cela fait ressortir l’arrondi des bords de l’oeuf. La surface Afin de suggérer la forme rebondie de l’oeuf, nous allons ajouter un nouveau dégradé, réalisé cette fois selon une autre technique. Il s’agit de créer un effet de lumière, puis de le transformer en assombrissement. Pour cela, sélectionner le filtre “Light and Shadow &amp;gt; Lighting Effects” et ajuster les paramètres en fonction de l’aspect voulu. L’aperçu intégré dans ce plug-in est très utile. Pour ma part j’ai aligné la source de lumière sur le centre de l’oeuf et ajusté les paramètres de telle manière qu’ils produisent une lumière diffuse s’estompant rapidement sur les bords de l’oeuf. Une fois l’effet de lumière appliqué, choisir le menu “Couleur &amp;gt; Couleur vers Alpha” et sélectionner la couleur de la lumière (le blanc habituellement) : l’image devient alors un calque alpha donnant une impression de volume. L’éclairage Pour donner une apparence réaliste, nous allons ajouter un éclairage diffus avec l’outil “Light and Shadow &amp;gt; Lighting Effects”. Il est possible d’appliquer plusieurs sources de lumière en fonction de la scène dans laquelle l’oeuf sera présenté. Si l’oeuf est blanc, utiliser une autre couleur d’éclairage. Afin de renforcer l’aspect lisse et brillant de la coquille, nous pouvons ajouter un reflet simplement composé d’un ovale blanc rendu semi-transparent. L’effet B.D. En général on peut donner un effet “bande dessinée” à un dessin en accentuant les traits. Dans le cas de notre oeuf, la première chose à faire consiste à augmenter l’épaisseur du contour, ce qui est très facilement réalisé par le menu Sélection &amp;gt; Bordure”. Il est également possible d’accentuer les dégradés en jouant sur le taux de transparence et d’intensifier les couleurs pour les faire ressortir. Lors du redimensionnement de l’image vers une taille plus petite, ne pas utiliser de lissage, afin d’obtenir un contour net sur un fond transparent. La texture L’une des raisons pour laquelle je me suis lancé dans cette entreprise était de pouvoir fabriquer une série d’oeufs décorés de manière originale pour différentes occasions. Une méthode pour plaquer une texture sur l’oeuf est d’exploiter le plug-in “Filters &amp;gt; G’MIC &amp;gt; Deformations &amp;gt; Fish-eye”. On peut obtenir facilement l’effet attendu en appliquant ce filtre à un calque contenant la texture. Bien que cet effet ne déforme pas l’image exactement selon la forme d’un oeuf, la différence n’est pas notable à l’oeil nu. Réutilisation Voilà pour les quelques conseils ; j’autorise (et j’encourage) quiconque à réutiliser cette image, et à la modifier pour usage personnel ou commercial. Tirez profit de l’image source au format Gimp jointe à cet article et n’hésitez pas à me remonter vos commentaires, je serais très heureux d’avoir vos retours ! Télécharger le fichier source : egg.xcf Références Gimp - gimp.org Plug-in “oeuf” - gimpchat.com/viewtopic.php?f=9&amp;amp;t=7038 Plug-in G’MIC - gmic.sourceforge.net Android Icon Design Guidelines - developer.android.com/guide/practices/ui_guidelines/icon_design.html Tutoriels en français et modèle de forme - elledemai.blogspot.fr/2009/03/tutoriel-uf-et-cu-happy-eggs.html Icônes d’oeuf - softicons.com/search?search=egg Tutoriel vidéo - youtube.com/watch?v=0c-hMz2XpP8 Super guide pour plaquer une texture - gimptalk.com/index.php?/topic/1659-making-empty-broken-egg-shell-in-gimp</summary></entry></feed>